# sql_router.py
import sqlite3, pathlib, re
from typing import Dict, Any

DB = pathlib.Path("Data/sql/vit_vellore.db")

def detect_structured_intent(q: str) -> str:
    ql = q.lower()
    if any(k in ql for k in ["hostel", "room", "block", "mess", "dhobi", "laundry", "fee", "fees", "tuition"]):
        return "tabular"
    if any(k in ql for k in ["contact", "phone", "email", "supervisor"]):
        return "contacts"
    return "text"

def parse_filters(q: str) -> Dict[str, Any]:
    ql = q.lower()
    f = {"ay": None, "gender": None, "category": None, "level": None}
    if re.search(r"\b(20\d{2})\b", ql):
        yr = re.search(r"\b(20\d{2})\b", ql).group(1)
        f["ay"] = f"{yr}-{str(int(yr[-2:])+1).zfill(2)}"
    if any(k in ql for k in ["boy", "boys", "men", "mh"]): f["gender"] = "Male"
    if any(k in ql for k in ["girl", "girls", "ladies", "lh", "women"]): f["gender"] = "Female"
    if "nri" in ql: f["category"] = "NRI"
    elif "foreign" in ql: f["category"] = "Foreign"
    elif "indian" in ql: f["category"] = "Indian"
    if any(k in ql for k in ["senior"]): f["level"] = "Senior"
    if any(k in ql for k in ["first year", "fresh"]): f["level"] = "First-Year"
    return f

def sql_hostel_overview(f: Dict[str,Any], limit_blocks: int = 20) -> Dict[str, Any]:
    con = sqlite3.connect(DB)
    con.row_factory = sqlite3.Row
    where = ["1=1"]
    args = []
    if f["gender"]: where.append("b.gender=?"); args.append(f["gender"])
    if f["level"]:  where.append("IFNULL(b.level,'')=IFNULL(?, '')"); args.append(f["level"])
    if f["ay"]:     where.append("IFNULL(hf.ay,'')=IFNULL(?, '')"); args.append(f["ay"])
    if f["category"]: where.append("IFNULL(hf.category,'')=IFNULL(?, '')"); args.append(f["category"])

    sql = f"""
    SELECT b.block_name, b.display_name, b.gender, b.level, b.block_type,
           hf.ay, hf.category, hf.occupancy, hf.ac, hf.mess_type,
           hf.room_mess_fee, hf.admission_fee, hf.caution_deposit, hf.other_fee, hf.total_fee, hf.currency,
           hf.source_file
    FROM hostel_fees hf
    JOIN blocks b ON b.id = hf.block_id
    WHERE {' AND '.join(where)}
    ORDER BY b.block_type, b.block_name, hf.occupancy, hf.ac DESC, hf.mess_type
    """
    rows = con.execute(sql, args).fetchall()

    am_sql = "SELECT b.block_name, a.key, a.value FROM amenities a JOIN blocks b ON b.id=a.block_id"
    am = con.execute(am_sql).fetchall()
    con.close()

    columns = ["Block", "Gender", "Level", "Type", "AY", "Category", "Occ", "AC", "Mess", "Room+Mess", "Admission", "Caution", "Other", "Total", "Curr", "Source"]
    tbl = {"title": "Hostel Fee Details (Vellore)", "columns": columns, "rows": []}
    for r in rows[:1000]:
        tbl["rows"].append([
            r["display_name"] or r["block_name"] or "",
            r["gender"] or "", r["level"] or "", r["block_type"] or "",
            r["ay"] or "", r["category"] or "", r["occupancy"] or "",
            "AC" if (r["ac"]==1) else ("Non-AC" if (r["ac"]==0) else ""),
            r["mess_type"] or "", r["room_mess_fee"] or "", r["admission_fee"] or "",
            r["caution_deposit"] or "", r["other_fee"] or "", r["total_fee"] or "",
            r["currency"] or "", r["source_file"] or ""
        ])

    bullets = []
    seen_blocks = {}
    for r in rows:
        key = (r["gender"], r["level"], r["block_type"])
        seen_blocks.setdefault(key, set()).add(r["block_name"] or r["display_name"] or "")
    for (g,l,t), names in list(seen_blocks.items())[:limit_blocks]:
        count = len([n for n in names if n])
        bullets.append(f"{g or '—'} {l or '—'} {t or '—'}: {count} block(s)")

    dhobi = [x for x in am if (x["key"] or "").lower() in ("dhobi","laundry")]
    if dhobi:
        bullets.append("Laundry/Dhobi: " + "; ".join({f'{d["block_name"]}: {d["value"]}' for d in dhobi if d["block_name"]}))

    return {"table": tbl, "bullets": bullets, "sources": list({r["source_file"] for r in rows if r["source_file"]})}

def sql_block_contacts(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    where = ["1=1"]; args=[]
    if f["gender"]: where.append("IFNULL(b.gender,'')=IFNULL(?, '')"); args.append(f["gender"])
    if f["level"]: where.append("IFNULL(b.level,'')=IFNULL(?, '')"); args.append(f["level"])
    sql = f"""
    SELECT b.block_name, b.display_name, c.name, c.role, c.phone, c.email
    FROM contacts c JOIN blocks b ON b.id=c.block_id
    WHERE {' AND '.join(where)}
    ORDER BY b.block_name, c.role
    """
    rows = con.execute(sql, args).fetchall()
    con.close()
    cols = ["Block","Name","Role","Phone","Email"]
    tbl = {"title":"Hostel Contacts", "columns":cols, "rows":[
        [r["display_name"] or r["block_name"] or "", r["name"] or "", r["role"] or "", r["phone"] or "", r["email"] or ""]
        for r in rows
    ]}
    return {"table": tbl, "bullets": [], "sources": []}
