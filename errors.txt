# app/utils/aliases.py
# token â†’ canonical mappings + simple slot extraction

import re
from typing import Optional, Dict

ALIAS_MAP = {
    # hostel
    "mens": "Boys", "boys": "Boys", "mh": "Boys",
    "ladies": "Girls", "girls": "Girls", "lh": "Girls",
    "deluxe": "Deluxe", "premium": "Deluxe",
    "apartment": "Apartment", "regular": "Regular",
    "firstyear": "First-Year", "freshers": "First-Year", "senior": "Senior",
    "foreign": "NRI", "nri": "NRI", "indian": "Indian",
    # academics levels
    "ug": "UG", "undergrad": "UG", "btech": "UG", "b.sc": "UG", "bca": "UG", "bba": "UG",
    "pg": "PG", "postgrad": "PG", "mtech": "PG", "m.sc": "MSC", "msc": "MSC", "mca": "MCA"
}

def normalize_token(tok: str) -> str:
    return re.sub(r"[^a-z0-9]+","", tok.lower())

def map_alias(tok: str) -> Optional[str]:
    return ALIAS_MAP.get(normalize_token(tok))

def detect_gender(q: str) -> Optional[str]:
    s = normalize_token(q)
    if "boys" in s or "mens" in s or "mh" in s: return "Boys"
    if "girls" in s or "ladies" in s or "lh" in s: return "Girls"
    return None

def detect_category(q: str) -> Optional[str]:
    s = q.lower()
    if "nri" in s or "foreign" in s: return "NRI"
    if "indian" in s: return "Indian"
    return None

def detect_level(q: str) -> Optional[str]:
    s = q.lower()
    if any(w in s for w in ["first year","fresher","freshmen"]): return "First-Year"
    if "senior" in s: return "Senior"
    return None

def detect_year(q: str) -> Optional[int]:
    m = re.search(r"\b(20\d{2})\b", q)
    return int(m.group(1)) if m else None
