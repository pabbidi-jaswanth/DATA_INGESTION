# app/handlers/rules.py
# refund / attendance / discipline / anti-ragging

from __future__ import annotations
import sqlite3
from pathlib import Path
from typing import Optional
from app.utils.render import bullets, provenance

DB_PATH = Path("Data/sql/vit_vellore.db")

def _c():
    con = sqlite3.connect(str(DB_PATH))
    con.row_factory = sqlite3.Row
    return con

def _has(con, t): return con.execute("SELECT 1 FROM sqlite_master WHERE type='table' AND name=?",(t,)).fetchone() is not None

def rules(category: Optional[str]=None) -> str:
    with _c() as con:
        if not _has(con,"rules"):
            return "_Rules table not found._"
        if category:
            rs = con.execute("SELECT category, title, description, source_file, last_verified_on FROM rules WHERE LOWER(category)=? ORDER BY rowid",(category.lower(),)).fetchall()
        else:
            rs = con.execute("SELECT category, title, description, source_file, last_verified_on FROM rules ORDER BY category, rowid").fetchall()
        groups={}
        for r in rs:
            groups.setdefault(r["category"], []).append(f"{r['title']}: {r['description']}")
        parts=[]
        any_row = rs[0] if rs else None
        for cat, items in groups.items():
            parts.append(bullets(f"{cat.title()} â€” Key Points", items))
        return ("\n\n".join(parts) if parts else "_No rules available._") + provenance(None, any_row["source_file"] if any_row else None, any_row["last_verified_on"] if any_row else None)

def attendance() -> str:   return rules("attendance")
def refund() -> str:       return rules("refund")
def discipline() -> str:   return rules("discipline")
def anti_ragging() -> str: return rules("anti-ragging")
