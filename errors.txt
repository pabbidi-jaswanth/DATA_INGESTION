# sql_router.py — unified structured queries for Academics + Hostel + Rules + VITREE
import sqlite3, pathlib, re
from typing import Dict, Any, List

DB = pathlib.Path("Data/sql/vit_vellore.db")

# ---------------- intent + filters ----------------

def detect_structured_intent(q: str) -> str:
    s = q.lower()
    # HIGH-precision slices first
    if any(k in s for k in ["program", "programme", "course"]):
        return "acad_programs"
    if any(k in s for k in ["eligib", "qualification", "criteria"]):
        return "acad_eligibility"
    if any(k in s for k in ["document", "certificate", "submit", "submission"]):
        return "acad_documents"
    if any(k in s for k in ["fee", "tuition"]) and not any(k in s for k in ["hostel", "mess"]):
        return "acad_fees"
    if "scholar" in s:
        return "acad_scholarships"

    if any(k in s for k in ["attendance","refund","discipline","anti ragging","anti-ragging","exam","examination","rules","norms"]):
        return "rules"

    if any(k in s for k in ["vitree","phd","research","stipend","fellowship"]):
        if "stipend" in s or "fellowship" in s:
            return "vitree_stipend"
        if "fee" in s or "tuition" in s:
            return "vitree_fees"
        return "vitree"

    # hostel buckets
    if any(k in s for k in ["contact", "phone", "email", "supervisor"]):
        return "hostel_contacts"
    if "block" in s and any(k in s for k in ["name","names","list","all","codes","code"]):
        return "hostel_blocks"
    if any(k in s for k in ["hostel", "room", "block", "mess", "dhobi", "laundry", "fee", "fees"]):
        return "hostel_tabular"

    return "text"

def parse_filters(q: str) -> Dict[str, Any]:
    s = q.lower()
    f = {"ay": None, "gender": None, "category": None, "level": None, "program": None}

    # AY like 2025 -> 2025-26
    m = re.search(r"\b(20\d{2})\b", s)
    if m:
        yr = m.group(1)
        f["ay"] = f"{yr}-{str(int(yr[-2:])+1).zfill(2)}"

    if any(k in s for k in ["boy", "boys", "men", "mh", "mens"]): f["gender"] = "Male"
    if any(k in s for k in ["girl", "girls", "ladies", "lh", "women"]): f["gender"] = "Female"

    if "nri" in s: f["category"] = "NRI"
    elif "foreign" in s: f["category"] = "Foreign"
    elif "indian" in s: f["category"] = "Indian"

    if "senior" in s: f["level"] = "Senior"
    if "first year" in s or "first-year" in s or "fresh" in s: f["level"] = "First-Year"

    # level/program for academics
    if any(k in s for k in ["ug","undergrad","btech","b.tech","bca","bba","bsc","b.sc"]): f["acad_level"] = "UG"
    elif any(k in s for k in ["pg","postgrad","mtech","m.tech","mba","msc","m.sc","mca"]): f["acad_level"] = "PG"

    # crude program token (CSE, ECE, MBA…)
    pm = re.search(r"\b(cse|ece|eee|civil|mech|it|ai|aiml|ds|mba|mca|physics|chemistry|math|biotech)\b", s)
    if pm: f["program"] = pm.group(1).upper()

    return f

# ---------------- small render helper ----------------

def md_table(title: str, cols: List[str], rows: List[List[str]]) -> Dict[str, Any]:
    return {"table": {"title": title, "columns": cols, "rows": rows}, "bullets": [], "sources": []}

# ---------------- ACADEMICS ----------------

def sql_acad_programs(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    where, args = ["1=1"], []
    if f.get("acad_level"): where.append("IFNULL(level,'')=IFNULL(?, '')"); args.append(f["acad_level"])
    if f.get("program"): where.append("upper(program) LIKE ?"); args.append(f"%{f['program']}%")
    sql = f"SELECT level, program, COALESCE(school,'') AS school, COALESCE(duration,'') AS duration FROM programs WHERE {' AND '.join(where)} ORDER BY level, program"
    rows = con.execute(sql, args).fetchall(); con.close()
    cols = ["Level", "Program", "School", "Duration"]
    data = [[r["level"] or "", r["program"] or "", r["school"] or "", r["duration"] or ""] for r in rows]
    return md_table("Programs Offered", cols, data)

def sql_acad_eligibility(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    where, args = ["1=1"], []
    if f.get("acad_level"): where.append("IFNULL(level,'')=IFNULL(?, '')"); args.append(f["acad_level"])
    if f.get("program"): where.append("(upper(program)=? OR upper(program)='ALL')"); args.append(f["program"])
    sql = f"SELECT level, program, criteria, COALESCE(source_file,'') as src FROM eligibility WHERE {' AND '.join(where)} ORDER BY level, program"
    rows = con.execute(sql, args).fetchall(); con.close()
    cols = ["Level","Program","Criteria","Source"]
    data = [[r["level"] or "", r["program"] or "", r["criteria"] or "", r["src"] or ""] for r in rows]
    return md_table("Eligibility", cols, data)

def sql_acad_documents(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    where, args = ["1=1"], []
    if f.get("acad_level"): where.append("IFNULL(level,'')=IFNULL(?, '')"); args.append(f["acad_level"])
    if f.get("program"): where.append("(upper(program)=? OR upper(program)='ALL')"); args.append(f["program"])
    sql = f"SELECT level, program, item, COALESCE(details,'') as details, COALESCE(source_file,'') as src FROM documents_required WHERE {' AND '.join(where)} ORDER BY level, program, item"
    rows = con.execute(sql, args).fetchall(); con.close()
    cols = ["Level","Program","Document","Details","Source"]
    data = [[r["level"] or "", r["program"] or "", r["item"] or "", r["details"] or "", r["src"] or ""] for r in rows]
    return md_table("Documents to Submit", cols, data)

def sql_acad_fees(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    where, args = ["1=1"], []
    if f.get("acad_level"): where.append("IFNULL(level,'')=IFNULL(?, '')"); args.append(f["acad_level"])
    if f.get("program"): where.append("(upper(program)=? OR upper(program)='ALL')"); args.append(f["program"])
    if f.get("category"): where.append("IFNULL(category,'')=IFNULL(?, '')"); args.append(f["category"])
    if f.get("ay"): where.append("IFNULL(ay,'')=IFNULL(?, '')"); args.append(f["ay"])
    sql = f"""
    SELECT level, program, category, ay, tuition, one_time, caution, total, currency, COALESCE(source_file,'') as src
    FROM academic_fees
    WHERE {' AND '.join(where)}
    ORDER BY level, program, category
    """
    rows = con.execute(sql, args).fetchall(); con.close()
    cols = ["Level","Program","Category","AY","Tuition","One-time","Caution","Total","Curr","Source"]
    data = [[r["level"] or "", r["program"] or "", r["category"] or "", r["ay"] or "",
             r["tuition"] or "", r["one_time"] or "", r["caution"] or "", r["total"] or "",
             r["currency"] or "", r["src"] or ""] for r in rows]
    return md_table("Academic Fees", cols, data)

def sql_acad_scholarships(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    where, args = ["1=1"], []
    if f.get("acad_level"): where.append("IFNULL(level,'')=IFNULL(?, '')"); args.append(f["acad_level"])
    sql = f"SELECT level, name, criteria, amount, currency, COALESCE(source_file,'') as src FROM scholarships WHERE {' AND '.join(where)} ORDER BY level, name"
    rows = con.execute(sql, args).fetchall(); con.close()
    cols = ["Level","Scholarship","Criteria","Amount","Curr","Source"]
    data = [[r["level"] or "", r["name"] or "", r["criteria"] or "", r["amount"] or "", r["currency"] or "", r["src"] or ""] for r in rows]
    return md_table("Scholarships", cols, data)

# ---------------- RULES ----------------

def sql_rules(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    s = f.get("rules_category", None)
    where, args = ["1=1"], []
    if s: where.append("lower(category)=?"); args.append(s.lower())
    sql = f"SELECT category, title, text, COALESCE(ay,'') as ay, COALESCE(source_file,'') as src FROM rules WHERE {' AND '.join(where)} ORDER BY category, title"
    rows = con.execute(sql, args).fetchall(); con.close()
    cols = ["Category","Title","Text","AY","Source"]
    data = [[r["category"] or "", r["title"] or "", r["text"] or "", r["ay"] or "", r["src"] or ""] for r in rows]
    return md_table("Rules", cols, data)

# ---------------- VITREE ----------------

def sql_vitree(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    rows = con.execute("SELECT key, value, COALESCE(source_file,'') as src FROM vitree ORDER BY key").fetchall()
    cols = ["Key","Value","Source"]
    data = [[r["key"] or "", r["value"] or "", r["src"] or ""] for r in rows]
    con.close()
    return md_table("VITREE — Process", cols, data)

def sql_vitree_fees(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    rows = con.execute("SELECT category, ay, fee, currency, COALESCE(source_file,'') as src FROM vitree_fees ORDER BY category").fetchall()
    cols = ["Category","AY","Fee","Curr","Source"]
    data = [[r["category"] or "", r["ay"] or "", r["fee"] or "", r["currency"] or "", r["src"] or ""] for r in rows]
    con.close()
    return md_table("VITREE — Fees", cols, data)

def sql_vitree_stipend(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    rows = con.execute("SELECT scheme, amount, period, currency, COALESCE(source_file,'') as src FROM vitree_stipend ORDER BY scheme").fetchall()
    cols = ["Scheme","Amount","Period","Curr","Source"]
    data = [[r["scheme"] or "", r["amount"] or "", r["period"] or "", r["currency"] or "", r["src"] or ""] for r in rows]
    con.close()
    return md_table("VITREE — Stipend", cols, data)

# ---------------- HOSTEL (kept from your earlier pipeline) ----------------

def sql_hostel_overview(f: Dict[str,Any], limit_blocks: int = 20) -> Dict[str, Any]:
    con = sqlite3.connect(DB)
    con.row_factory = sqlite3.Row
    where = ["1=1"]
    args = []
    if f.get("gender"):   where.append("IFNULL(b.gender,'')=IFNULL(?, '')");   args.append(f["gender"])
    if f.get("level"):    where.append("IFNULL(b.level,'')=IFNULL(?, '')");    args.append(f["level"])
    if f.get("ay"):       where.append("IFNULL(hf.ay,'')=IFNULL(?, '')");      args.append(f["ay"])
    if f.get("category"): where.append("IFNULL(hf.category,'')=IFNULL(?, '')");args.append(f["category"])
    where.append("""(
        COALESCE(hf.total_fee,'')<>'' OR COALESCE(hf.room_mess_fee,'')<>'' OR
        COALESCE(hf.admission_fee,'')<>'' OR COALESCE(hf.caution_deposit,'')<>'' OR
        COALESCE(hf.occupancy,'')<>'' OR COALESCE(hf.mess_type,'')<>''
    )""")

    sql = f"""
    SELECT b.block_name, b.display_name, b.gender, b.level, b.block_type,
           hf.ay, hf.category, hf.occupancy, hf.ac, hf.mess_type,
           hf.room_mess_fee, hf.admission_fee, hf.caution_deposit, hf.other_fee, hf.total_fee, hf.currency,
           hf.source_file
    FROM hostel_fees hf
    JOIN blocks b ON b.id = hf.block_id
    WHERE {' AND '.join(where)}
    ORDER BY b.block_type, b.block_name, hf.occupancy, hf.ac DESC, hf.mess_type
    """
    rows = con.execute(sql, args).fetchall()
    con.close()

    columns = ["Block", "Gender", "Level", "Type", "AY", "Category", "Occ", "AC", "Mess",
               "Room+Mess", "Admission", "Caution", "Other", "Total", "Curr", "Source"]
    tbl = {"title": "Hostel Fee Details (Vellore)", "columns": columns, "rows": []}
    for r in rows[:1000]:
        tbl["rows"].append([
            r["display_name"] or r["block_name"] or "",
            r["gender"] or "", r["level"] or "", r["block_type"] or "",
            r["ay"] or "", r["category"] or "", r["occupancy"] or "",
            "AC" if (r["ac"]==1) else ("Non-AC" if (r["ac"]==0) else ""),
            r["mess_type"] or "", r["room_mess_fee"] or "", r["admission_fee"] or "",
            r["caution_deposit"] or "", r["other_fee"] or "", r["total_fee"] or "",
            r["currency"] or "", r["source_file"] or ""
        ])
    return {"table": tbl, "bullets": [], "sources": []}

def sql_block_contacts(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    where = ["1=1"]; args=[]
    if f.get("gender"): where.append("IFNULL(b.gender,'')=IFNULL(?, '')"); args.append(f["gender"])
    if f.get("level"):  where.append("IFNULL(b.level,'')=IFNULL(?, '')");  args.append(f["level"])
    sql = f"""
    SELECT b.block_name, b.display_name, c.name, c.role, c.phone, c.email
    FROM contacts c JOIN blocks b ON b.id=c.block_id
    WHERE {' AND '.join(where)}
    ORDER BY b.block_name, c.role
    """
    rows = con.execute(sql, args).fetchall()
    con.close()
    cols = ["Block","Name","Role","Phone","Email"]
    tbl = {"title":"Hostel Contacts", "columns":cols, "rows":[
        [r["display_name"] or r["block_name"] or "", r["name"] or "", r["role"] or "", r["phone"] or "", r["email"] or ""]
        for r in rows
    ]}
    return {"table": tbl, "bullets": [], "sources": []}

def sql_list_blocks(f: Dict[str,Any]) -> Dict[str,Any]:
    con = sqlite3.connect(DB); con.row_factory = sqlite3.Row
    where = ["1=1"]; args=[]
    if f.get("gender"): where.append("IFNULL(gender,'')=IFNULL(?, '')"); args.append(f["gender"])
    if f.get("level"):  where.append("IFNULL(level,'')=IFNULL(?, '')");  args.append(f["level"])
    sql = f"""
    SELECT display_name, block_name, gender, level, block_type
    FROM blocks
    WHERE {' AND '.join(where)}
    ORDER BY gender, level, block_name
    """
    rows = con.execute(sql, args).fetchall()
    con.close()
    cols = ["Block","Gender","Level","Type"]
    tbl = {"title":"Hostel Blocks", "columns":cols, "rows":[
        [r["display_name"] or r["block_name"] or "", r["gender"] or "", r["level"] or "", r["block_type"] or ""]
        for r in rows
    ]}
    return {"table": tbl, "bullets": [], "sources": []}
