# app/handlers/rules.py — refund/attendance/discipline/exam etc.

import re, sqlite3
from typing import Optional
from app.utils.render import md_table, bullets

RULE_KEYS = ["refund","attendance","discipline","anti-ragging","anti ragging","exam","examination"]

def detect_rules_intent(q: str) -> bool:
    ql = q.lower()
    return any(k in ql for k in RULE_KEYS)

def answer_rules_sql(con: sqlite3.Connection, q: str) -> Optional[str]:
    if not con: return None
    ql = q.lower()
    cat = None
    for k in RULE_KEYS:
        if k in ql:
            cat = "anti-ragging" if k in ("anti ragging","anti-ragging") else k
            break
    sql = "SELECT category, title, text, IFNULL(ay,'') as ay, source_file FROM rules"
    args = []
    if cat:
        sql += " WHERE LOWER(category)=LOWER(?)"
        args.append(cat)
    sql += " ORDER BY ay DESC, title"
    rows = con.execute(sql, args).fetchall()
    if not rows:
        return None
    lines = [f"**{r['title']}** — {r['text']} *(AY: {r['ay']} | src: {r['source_file']})*" for r in rows]
    return bullets(lines, f"Rules — {cat.title() if cat else 'All'}")






# app/utils/aliases.py — simple normalizers and token→canonical maps

import re

def norm(s: str) -> str:
    return re.sub(r"[^a-z0-9]+","", (s or "").lower())

def level_alias(txt: str) -> str:
    if not txt: return ""
    t = txt.lower()
    if t in ("ug","undergrad","undergraduate","btech","b.tech","bsc","bca","bba"): return "UG"
    if t in ("pg","postgrad","postgraduate","mtech","m.tech","msc","m.sc","mca","mba"): return "PG"
    return txt

def category_alias(txt: str) -> str:
    if not txt: return ""
    t = txt.lower()
    if "nri" in t: return "NRI"
    if "foreign" in t: return "Foreign"
    if "indian" in t: return "Indian"
    return txt




# app/utils/render.py — consistent markdown output

from typing import List, Optional

def md_table(title: str, cols: List[str], rows: List[List[str]]) -> str:
    seen=set(); uniq=[]
    for r in rows:
        tup=tuple("" if c is None else str(c) for c in r)
        if tup in seen: continue
        seen.add(tup); uniq.append(list(tup))
    out = []
    if title: out.append(f"**{title}**")
    out.append("| " + " | ".join(cols) + " |")
    out.append("|" + "|".join(["---"]*len(cols)) + "|")
    for r in uniq:
        out.append("| " + " | ".join("" if c is None else str(c) for c in r) + " |")
    return "\n".join(out)

def bullets(lines: List[str], title: Optional[str]=None) -> str:
    if not lines: return ""
    seen=set(); out_lines=[]
    for ln in lines:
        if ln in seen: continue
        seen.add(ln); out_lines.append(ln)
    out = [f"**{title}**" if title else ""]
    out += [f"- {ln}" for ln in out_lines]
    return "\n".join([x for x in out if x])

def join_sources(srcs: List[str], maxn: int = 5) -> str:
    if not srcs: return ""
    uniq = []
    seen = set()
    for s in srcs:
        if not s or s in seen: continue
        seen.add(s); uniq.append(s)
        if len(uniq) >= maxn: break
    return ", ".join(uniq)
