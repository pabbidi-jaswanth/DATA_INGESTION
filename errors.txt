# app/utils/render.py
# consistent, compact markdown renderers

from typing import List, Optional

def md_table(title: str, cols: List[str], rows: List[List[object]], max_rows: int = 60) -> str:
    if not rows:
        return "_No data found._"
    rows = rows[:max_rows]
    out=[]
    if title: out.append(f"**{title}**")
    out.append("| " + " | ".join(cols) + " |")
    out.append("|" + "|".join(["---"]*len(cols)) + "|")
    for r in rows:
        out.append("| " + " | ".join("" if v is None else str(v) for v in r) + " |")
    return "\n".join(out)

def bullets(title: str, items: List[str], max_items: int = 20) -> str:
    if not items:
        return "_No data found._"
    seen=set(); out=[]
    for it in items:
        k = "".join(ch for ch in it.lower() if ch.isalnum())
        if k in seen: continue
        seen.add(k); out.append(it)
        if len(out) >= max_items: break
    return "**" + title + "**\n" + "\n".join("- " + it for it in out)

def provenance(note: Optional[str], src: Optional[str], verified: Optional[str]) -> str:
    parts=[]
    if note: parts.append(note)
    meta=[]
    if src: meta.append(src)
    if verified: meta.append(f"Verified: {verified}")
    if meta: parts.append("Source: " + " Â· ".join(meta))
    return ("\n\n" + " ".join(parts)) if parts else ""
