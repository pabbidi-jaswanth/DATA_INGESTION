import pathlib
from typing import Dict, Any, List

import streamlit as st

# ---- import your existing backend helpers ----
# Make sure you run: streamlit run streamlit_app.py from the repo root
from app.sql_router import (
    sql_programs, sql_eligibility, sql_documents, sql_academic_fees,
    sql_scholarships, sql_hostel_overview, sql_block_contacts, sql_list_blocks
)
from app.utils.fallback_rag import faiss_answer_or_summary

# ---------------- CONFIG ----------------
FAISS_INDEX_DIR = pathlib.Path("Data/index/faiss")   # your FAISS folder
FAISS_COLLECTION = "vit_faq_vellore"                 # your collection name

st.set_page_config(page_title="UG FAQs â€” Click to Answer", layout="wide")

# ---------------- UG 40 Static Questions ----------------
# Each item carries routing info so we can do SQL-first, otherwise FAISS summary.
UG_REG: List[Dict[str, Any]] = [
    # Programs / Courses
    {"qid":"UG-01","label":"What UG programs and specializations are offered?","handler":"programs","filters":{"level_like":"UG"}},
    {"qid":"UG-02","label":"Which B.Tech specializations are available at each campus?","handler":"programs","filters":{"level_like":"UG","program_like":"B.Tech"}},
    {"qid":"UG-03","label":"What nonâ€“B.Tech UG programs are offered (BBA/B.Com/BCA etc.)?","handler":"programs","filters":{"level_like":"UG","program_like":"BBA B.Com BCA"}},

    # Eligibility
    {"qid":"UG-04","label":"UG eligibility: minimum marks and required subjects","handler":"eligibility","filters":{"level_like":"UG"}},
    {"qid":"UG-05","label":"Is Mathematics mandatory for specific B.Tech programs?","handler":"eligibility","filters":{"level_like":"UG","program_like":"B.Tech"}},
    {"qid":"UG-06","label":"Are NIOS/correspondence students eligible for UG?","handler":"eligibility","filters":{"level_like":"UG","program_like":"ALL"}},
    {"qid":"UG-07","label":"Eligibility for NRI/OCI/PIO applicants (UG)","handler":"eligibility","filters":{"level_like":"UG","program_like":"ALL"}},

    # Documents
    {"qid":"UG-08","label":"Documents to submit for UG admission and reporting","handler":"documents","filters":{"level_like":"UG"}},
    {"qid":"UG-09","label":"Where to download affidavits and fitness forms?","handler":"documents","filters":{"level_like":"UG","program_like":"affidavit fitness"}},
    {"qid":"UG-10","label":"Photo/signature/document upload specifications","handler":"documents","filters":{"level_like":"UG","program_like":"photo signature upload"}},

    # Fees
    {"qid":"UG-11","label":"UG tuition fee (Indian category) for AY 2025â€“26","handler":"fees","filters":{"level_like":"UG","category":"Indian","ay":"2025-26"}},
    {"qid":"UG-12","label":"UG tuition fee (NRI category) for AY 2025â€“26","handler":"fees","filters":{"level_like":"UG","category":"NRI","ay":"2025-26"}},
    {"qid":"UG-13","label":"UG tuition fee (Foreign category) for AY 2025â€“26","handler":"fees","filters":{"level_like":"UG","category":"Foreign","ay":"2025-26"}},
    {"qid":"UG-14","label":"Is there a refundable caution deposit for UG?","handler":"fees","filters":{"level_like":"UG"}},

    # Scholarships
    {"qid":"UG-15","label":"Scholarships/waivers available for UG students","handler":"scholarships","filters":{"level_like":"UG"}},

    # Process & timelines (narrative â€“ FAISS)
    {"qid":"UG-16","label":"Step-by-step UG application process (Indian/NRI/Foreign)","handler":"faiss_summary","filters":{}},
    {"qid":"UG-17","label":"Important admission dates and deadlines for UG","handler":"faiss_summary","filters":{}},
    {"qid":"UG-18","label":"How is the merit list prepared and tie-break rules?","handler":"faiss_summary","filters":{}},
    {"qid":"UG-19","label":"Counselling and seat allotment process (rounds and sliding)","handler":"faiss_summary","filters":{}},
    {"qid":"UG-20","label":"Branch locking and later branch-change policy","handler":"faiss_summary","filters":{}},

    # Category-specific (NRI/Foreign) â€” mostly narrative
    {"qid":"UG-21","label":"Who is treated as NRI vs Foreign applicant?","handler":"faiss_summary","filters":{}},
    {"qid":"UG-22","label":"NRI application portal & fee payment instructions","handler":"faiss_summary","filters":{}},
    {"qid":"UG-23","label":"Foreign nationals/OCI/PIO application steps & fees","handler":"faiss_summary","filters":{}},

    # Hostel touchpoints for UG joiners (kept; uses hostel SQL if you have it)
    {"qid":"UG-24","label":"First-year hostel fee (Indian) AY 2025â€“26","handler":"hostel","filters":{"level":"First-Year","category":"Indian","ay":"2025-26"}},
    {"qid":"UG-25","label":"First-year hostel fee (NRI/Foreign) AY 2025â€“26","handler":"hostel","filters":{"level":"First-Year","category":"NRI","ay":"2025-26"}},
    {"qid":"UG-26","label":"Senior hostel fee overview AY 2025â€“26","handler":"hostel","filters":{"level":"Senior","ay":"2025-26"}},
    {"qid":"UG-27","label":"Hostel block landlines and key contacts","handler":"contacts","filters":{}},

    # International/NRI doc nuances (FAISS)
    {"qid":"UG-28","label":"Extra documents for NRI/Foreign students at reporting","handler":"faiss_summary","filters":{}},
    {"qid":"UG-29","label":"AIU equivalence and accepted international boards","handler":"faiss_summary","filters":{}},

    # Payments / Refunds
    {"qid":"UG-30","label":"Mode and schedule of tuition/hostel fee payment","handler":"faiss_summary","filters":{}},
    {"qid":"UG-31","label":"Refund policy if I withdraw before/after registration","handler":"faiss_summary","filters":{}},

    # After-offer logistics
    {"qid":"UG-32","label":"When to pay balance tuition/hostel after provisional admission?","handler":"faiss_summary","filters":{}},
    {"qid":"UG-33","label":"How to check application status and download letters?","handler":"faiss_summary","filters":{}},
    {"qid":"UG-34","label":"How to correct mistakes in the application after submission?","handler":"faiss_summary","filters":{}},
    {"qid":"UG-35","label":"Uploading pending 12th/board marks and verification process","handler":"faiss_summary","filters":{}},

    # Academics quick info (FAISS)
    {"qid":"UG-36","label":"Medium of instruction and availability of bridge courses","handler":"faiss_summary","filters":{}},
    {"qid":"UG-37","label":"Attendance, exams and grading policy (UG) overview","handler":"faiss_summary","filters":{}},

    # Careers (FAISS)
    {"qid":"UG-38","label":"Internships and industry-linked projects during UG","handler":"faiss_summary","filters":{}},
    {"qid":"UG-39","label":"Recent UG placement highlights & top recruiters","handler":"faiss_summary","filters":{}},

    # Support (FAISS)
    {"qid":"UG-40","label":"Whom to contact for UG admissions help (email/phone)?","handler":"faiss_summary","filters":{}},
]

# ---------------- Helpers ----------------
def _md_table(table: Dict[str, Any]) -> str:
    """Render a dict(table) => markdown table string."""
    if not table or not table.get("columns") or not table.get("rows"):
        return "_No results._"
    cols = table["columns"]
    rows = table["rows"]
    lines = [
        " | ".join(cols),
        " | ".join(["---"] * len(cols))
    ]
    for r in rows:
        lines.append(" | ".join("" if x is None else str(x) for x in r))
    return "\n".join(lines)

def _dispatch(handler: str, filters: Dict[str, Any], fallback_query: str) -> Dict[str, Any]:
    """
    Returns: {"type": "table" | "md", "content": <table_dict or markdown string>}
    Follows your architecture: SQL-first; narrative via FAISS.
    """
    # --- SQL-first routes ---
    if handler == "programs":
        return {"type": "table", "content": sql_programs(filters, "")}
    if handler == "eligibility":
        return {"type": "table", "content": sql_eligibility(filters, "")}
    if handler == "documents":
        return {"type": "table", "content": sql_documents(filters, "")}
    if handler == "fees":
        return {"type": "table", "content": sql_academic_fees(filters, "")}
    if handler == "scholarships":
        return {"type": "table", "content": sql_scholarships(filters, "")}
    if handler == "hostel":
        # hostel helper returns {"table": {...}, "notes": [...]}
        data = sql_hostel_overview(filters)
        tbl = data.get("table")
        notes = data.get("notes") or []
        md = _md_table(tbl)
        if notes:
            md += "\n\n" + "\n".join(f"- {n}" for n in notes)
        return {"type": "md", "content": md}
    if handler == "contacts":
        data = sql_block_contacts(filters)
        return {"type": "table", "content": data.get("table")}
    if handler == "blocks":
        data = sql_list_blocks(filters)
        return {"type": "table", "content": data.get("table")}

    # --- FAISS: narrative/guide answers from PDFs ---
    if handler == "faiss_summary":
        try:
            md = faiss_answer_or_summary(FAISS_INDEX_DIR, FAISS_COLLECTION, fallback_query)
            return {"type": "md", "content": md or "_No context found in PDFs._"}
        except Exception as e:
            return {"type": "md", "content": f"_FAISS error: {e}_"}

    return {"type": "md", "content": "_Unknown handler._"}

# ---------------- UI ----------------
st.title("ðŸŽ“ UG â€” Static FAQs (Click to Answer)")

left, right = st.columns([1, 3], gap="large")

with left:
    st.subheader("UG â€” 40 Questions")

    # Filter box for quick narrowing
    q_search = st.text_input("Filter", placeholder="Search in questions/QIDsâ€¦").strip().lower()
    options = [row for row in UG_REG if (q_search in row["label"].lower() or q_search in row["qid"].lower())]

    # Select + button for clean UX
    labels = [f"{r['qid']} â€” {r['label']}" for r in options]
    idx = st.selectbox("Select a question", options=range(len(labels)) if labels else [0],
                       format_func=(lambda i: labels[i] if labels else "â€”"),
                       label_visibility="collapsed")

    go = st.button("Get Answer", type="primary")
    # Persist the selected row in session
    if go and options:
        st.session_state["selected_ug"] = options[idx]
    elif "selected_ug" not in st.session_state and options:
        st.session_state["selected_ug"] = options[0]

with right:
    st.subheader("Answer")
    selected = st.session_state.get("selected_ug")
    if not selected:
        st.info("Pick a question on the left.")
    else:
        handler = selected.get("handler")
        filters = selected.get("filters") or {}
        fallback_query = selected.get("label", "")

        with st.spinner("Fetchingâ€¦"):
            result = _dispatch(handler, filters, fallback_query)

        st.markdown(f"**{selected['qid']}** â€” {selected['label']}")
        st.caption(f"Handler: `{handler}`  |  Filters: `{filters}`")

        if result["type"] == "table":
            table = result["content"]
            if not table:
                st.warning("No results from SQL.")
            else:
                cols = table.get("columns") or []
                rows = table.get("rows") or []
                if cols and rows:
                    import pandas as pd
                    df = pd.DataFrame(rows, columns=cols)
                    st.dataframe(df, use_container_width=True, hide_index=True)
                    with st.expander("Copy as Markdown"):
                        st.code(_md_table(table), language="markdown")
                else:
                    st.write("_No results._")
        else:
            st.markdown(result["content"])

    st.divider()
    st.caption("Source of truth: SQLite for tabular data Â· FAISS for narrative answers from PDFs.")
