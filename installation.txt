# streamlit_app.py
# VIT FAQs — Static click-to-answer UI (hybrid: SQLite for Programs/Fees; FAISS for the rest)
# Sections: UG, PG, MCA, MSc, HOSTELS (non-UG kept as placeholders you can fill later)

import pathlib
from typing import Dict, Any, List, Tuple
import streamlit as st

# ---- backend helpers (must exist in your repo) ----
from app.sql_router import (
    sql_programs,        # tabular programs accessor
    sql_academic_fees,   # tabular fees accessor
)
from app.utils.fallback_rag import faiss_answer_or_summary

# ---- config ----
FAISS_INDEX_DIR = pathlib.Path("Data/index/faiss")
FAISS_COLLECTION = "vit_faq_vellore"  # change if your collection differs

st.set_page_config(page_title="VIT FAQs — Click to Answer", layout="wide")

# ===================== UG — 30 questions (curated) =====================
# SQL routes: "programs", "fees". Everything else: "faiss_summary".

UG_REG: List[Dict[str, Any]] = [
    # ---------- SQL (Programs) ----------
    {"label": "What UG programs and specializations are offered?",
     "handler": "programs", "filters": {"level_like": "UG"}},
    {"label": "Which B.Tech specializations are available at each campus?",
     "handler": "programs", "filters": {"level_like": "UG", "program_like": "B.Tech"}},
    {"label": "What non–B.Tech UG programs are offered (BBA/B.Com/BCA etc.)?",
     "handler": "programs", "filters": {"level_like": "UG", "program_like": "BBA B.Com BCA"}},

    # ---------- SQL (Fees) ----------
    {"label": "UG tuition fee (Indian category) for AY 2025–26",
     "handler": "fees", "filters": {"level_like": "UG", "category": "Indian", "ay": "2025-26"}},
    {"label": "UG tuition fee (NRI category) for AY 2025–26",
     "handler": "fees", "filters": {"level_like": "UG", "category": "NRI", "ay": "2025-26"}},
    {"label": "UG tuition fee (Foreign category) for AY 2025–26",
     "handler": "fees", "filters": {"level_like": "UG", "category": "Foreign", "ay": "2025-26"}},

    # ---------- FAISS (PDFs) ----------
    {"label": "UG eligibility: minimum marks and required subjects", "handler": "faiss_summary", "filters": {}},
    {"label": "Is Mathematics mandatory for specific B.Tech programs?", "handler": "faiss_summary", "filters": {}},
    {"label": "Are NIOS/correspondence students eligible for UG?", "handler": "faiss_summary", "filters": {}},
    {"label": "Eligibility for NRI/OCI/PIO applicants (UG)", "handler": "faiss_summary", "filters": {}},

    {"label": "Who is treated as NRI vs Foreign applicant?", "handler": "faiss_summary", "filters": {}},
    {"label": "NRI application portal & fee payment instructions", "handler": "faiss_summary", "filters": {}},
    {"label": "Foreign nationals/OCI/PIO application steps & fees", "handler": "faiss_summary", "filters": {}},

    {"label": "Documents to submit for UG admission and reporting", "handler": "faiss_summary", "filters": {}},
    {"label": "Where to download affidavits and fitness forms?", "handler": "faiss_summary", "filters": {}},
    {"label": "Photo/signature/document upload specifications", "handler": "faiss_summary", "filters": {}},

    {"label": "Step-by-step UG application process (Indian/NRI/Foreign)", "handler": "faiss_summary", "filters": {}},
    {"label": "Important admission dates and deadlines for UG", "handler": "faiss_summary", "filters": {}},
    {"label": "How is the merit list prepared and tie-break rules?", "handler": "faiss_summary", "filters": {}},
    {"label": "Counselling and seat allotment process (rounds and sliding)", "handler": "faiss_summary", "filters": {}},
    {"label": "Branch locking and later branch-change policy", "handler": "faiss_summary", "filters": {}},

    {"label": "Is VITEEE mandatory for B.Tech admissions?", "handler": "faiss_summary", "filters": {}},
    {"label": "Is lateral entry available for B.Tech?", "handler": "faiss_summary", "filters": {}},

    {"label": "Can I edit my UG application after submission?", "handler": "faiss_summary", "filters": {}},
    {"label": "How to check application status and download letters?", "handler": "faiss_summary", "filters": {}},
    {"label": "How to upload/update 12th/board marks later?", "handler": "faiss_summary", "filters": {}},
    {"label": "Requirement for AIU equivalence / accepted international boards", "handler": "faiss_summary", "filters": {}},

    {"label": "When is the VITEEE mock test scheduled?", "handler": "faiss_summary", "filters": {}},
    {"label": "What valid ID proofs are accepted in the exam hall?", "handler": "faiss_summary", "filters": {}},

    {"label": "How to pay the UG application fee and accepted modes?", "handler": "faiss_summary", "filters": {}},
]

# Removed (the noisy/incorrect ones): hostel fee questions, hostel contacts, scholarships, placements, internships,
# attendance/exam/grading policy, medium of instruction, “when to pay balance tuition/hostel” — these were not
# reliably covered by your 9 UG PDFs, so they produced mismatched answers.

# ===== placeholders for other sections (you can replace later) =====
PG_REG  = [{"label": "PG programs and specializations available", "handler": "faiss_summary", "filters": {}}]
MCA_REG = [{"label": "MCA eligibility: qualifying degree and marks", "handler": "faiss_summary", "filters": {}}]
MSC_REG = [{"label": "MSc programs and specializations", "handler": "faiss_summary", "filters": {}}]
HST_REG = [{"label": "Hostel overview & fee types", "handler": "faiss_summary", "filters": {}}]

# ===================== helpers (key-mapping + SQL backoff) =====================
def _md_table(table: Dict[str, Any]) -> str:
    if not table or not table.get("columns") or not table.get("rows"):
        return "_No results._"
    cols = table["columns"]; rows = table["rows"]
    lines = [" | ".join(cols), " | ".join(["---"] * len(cols))]
    for r in rows:
        lines.append(" | ".join("" if x is None else str(x) for x in r))
    return "\n".join(lines)

def _normalize_for_programs(filters: Dict[str, Any]) -> Dict[str, Any]:
    """Mirror keys both ways so sql_programs can’t KeyError regardless of expected names."""
    f = dict(filters or {})
    lvl = f.get("level", f.get("level_like", "UG"))
    f["level"] = lvl
    f["level_like"] = lvl
    prog_like = f.get("program_like", f.get("prog_like"))
    if prog_like is not None:
        f["program_like"] = prog_like
        f["prog_like"] = prog_like
    f.setdefault("prog_is_degree", True)
    f.setdefault("prog_level_like", lvl)
    return f

def _normalize_for_fees(filters: Dict[str, Any]) -> Dict[str, Any]:
    """Mirror keys both ways so sql_academic_fees can’t KeyError; keep AY/category flexible."""
    f = dict(filters or {})
    lvl = f.get("level", f.get("level_like", "UG"))
    f["level"] = lvl
    f["level_like"] = lvl
    cat = f.get("category", f.get("fee_category"))
    if cat is not None:
        f["category"] = cat
        f["fee_category"] = cat
    ay = f.get("ay", f.get("academic_year", "2025-26"))
    f["ay"] = ay
    f["academic_year"] = ay
    prog_like = f.get("program_like", f.get("prog_like"))
    if prog_like is not None:
        f["program_like"] = prog_like
        f["prog_like"] = prog_like
    return f

def _sql_programs(filters: Dict[str, Any]) -> Tuple[bool, Dict[str, Any], str]:
    """Call sql_programs with mirrored keys; back off to broader filters if empty."""
    def _to_table(out):
        return out["table"] if isinstance(out, dict) and "table" in out else out
    try:
        f1 = _normalize_for_programs(filters)
        t1 = _to_table(sql_programs(f1, ""))
        if t1 and t1.get("columns") and t1.get("rows"):
            return True, t1, ""
        # backoff: only UG + degree guard
        f2 = {"level": "UG", "level_like": "UG", "prog_is_degree": True}
        t2 = _to_table(sql_programs(f2, ""))
        if t2 and t2.get("rows"):
            return True, t2, ""
        # last resort
        f3 = {"prog_is_degree": True}
        t3 = _to_table(sql_programs(f3, ""))
        if t3 and t3.get("rows"):
            return True, t3, ""
        return False, {}, "no_rows"
    except KeyError as e:
        return False, {}, f"keyerror:{e}"
    except Exception as e:
        return False, {}, f"exception:{e}"

def _sql_fees(filters: Dict[str, Any]) -> Tuple[bool, Dict[str, Any], str]:
    """Call sql_academic_fees with mirrored keys; back off to level-only, then empty."""
    def _to_table(out):
        return out["table"] if isinstance(out, dict) and "table" in out else out
    try:
        f1 = _normalize_for_fees(filters)
        t1 = _to_table(sql_academic_fees(f1, ""))
        if t1 and t1.get("columns") and t1.get("rows"):
            return True, t1, ""
        # backoff: only level
        f2 = {"level": "UG", "level_like": "UG"}
        t2 = _to_table(sql_academic_fees(f2, ""))
        if t2 and t2.get("rows"):
            return True, t2, ""
        # last resort: empty
        t3 = _to_table(sql_academic_fees({}, ""))
        if t3 and t3.get("rows"):
            return True, t3, ""
        return False, {}, "no_rows"
    except KeyError as e:
        return False, {}, f"keyerror:{e}"
    except Exception as e:
        return False, {}, f"exception:{e}"

def _dispatch(handler: str, filters: Dict[str, Any], fallback_query: str) -> Dict[str, Any]:
    """UG policy: SQL for Programs/Fees; FAISS for everything else."""
    if handler == "programs":
        ok, table, err = _sql_programs(filters)
        return {"type": "table" if ok else "error",
                "content": table if ok else f"SQL(programs) → {err}"}
    if handler == "fees":
        ok, table, err = _sql_fees(filters)
        return {"type": "table" if ok else "error",
                "content": table if ok else f"SQL(fees) → {err}"}
    # FAISS for non-tabular
    concise_prompt = (
        f"{fallback_query}\n\n"
        "Instruction: Answer ONLY from VIT UG admissions PDFs you were indexed with. "
        "Keep it concise and relevant to the question, prefer bullet points, and avoid unrelated PG/MCA/hostel details."
    )
    try:
        md = faiss_answer_or_summary(FAISS_INDEX_DIR, FAISS_COLLECTION, concise_prompt)
        return {"type": "md", "content": md or "_No context found in PDFs._"}
    except Exception as e:
        return {"type": "error", "content": f"FAISS error: {e}"}

def _render_answer(result: Dict[str, Any]):
    if result["type"] == "table":
        table = result["content"]
        cols = table.get("columns") or []; rows = table.get("rows") or []
        if cols and rows:
            import pandas as pd
            df = pd.DataFrame(rows, columns=cols)
            st.dataframe(df, use_container_width=True, hide_index=True)
            with st.expander("Copy as Markdown"):
                st.code(_md_table(table), language="markdown")
        else:
            st.warning("No rows.")
    elif result["type"] == "md":
        st.markdown(result["content"])
    else:
        st.error(result["content"])

# ===================== UI =====================
st.title("🎓 VIT — Static FAQs (Click to Answer)")

section = st.radio("Choose a section", ["UG", "PG", "MCA", "MSc", "HOSTELS"], horizontal=True)
REG_MAP = {"UG": UG_REG, "PG": PG_REG, "MCA": MCA_REG, "MSc": MSC_REG, "HOSTELS": HST_REG}
REG = REG_MAP[section]

left, right = st.columns([1.3, 2.0], gap="large")

with left:
    st.subheader(f"{section} — Questions")
    qf = st.text_input("type to filter…", placeholder="type to filter…").strip().lower()
    filtered = [r for r in REG if (qf in r["label"].lower())] if qf else REG
    for i, row in enumerate(filtered):
        if st.button(row["label"], key=f"{section}-{i}"):
            st.session_state["selected_item"] = (section, row)

with right:
    st.subheader("Answer")
    sel = st.session_state.get("selected_item")
    if not sel:
        st.info("Click a question on the left.")
    else:
        _, item = sel
        label = item["label"]; handler = item["handler"]; filters = item.get("filters") or {}
        with st.spinner("Fetching…"):
            result = _dispatch(handler, filters, label)
        st.markdown(f"**{label}**")
        _render_answer(result)

st.caption("UG policy: Programs & Fees → SQLite; all other UG questions → PDFs via FAISS. No chat — deterministic answers.")
