"""
SQL-first router; FAISS for narrative; friendly small-talk + graceful fallbacks.
"""
from pathlib import Path

# SQL router APIs
from app.sql_router import (
    detect_structured_intent, parse_filters,
    sql_hostel_overview, sql_block_contacts, sql_list_blocks,
    sql_programs, sql_eligibility, sql_documents, sql_academic_fees, sql_scholarships, sql_links
)

# ---------- small-talk defaults ----------
def _smalltalk(q: str) -> str | None:
    ql = q.strip().lower()
    if any(g in ql for g in ["hi","hello","hey","namaste","good morning","good afternoon","good evening"]):
        return "Hi! I’m the **VIT Admissions Chatbot**. Ask me about programs, fees (Indian/NRI/International), eligibility, documents, scholarships, hostels, and more."
    if "who are you" in ql:
        return "I’m the **VIT Admissions Chatbot** built for your project. I answer from your curated PDFs (FAISS) and structured CSV→SQLite data."
    if any(x in ql for x in ["how do you work","how does you work","how you work","what can you do"]):
        return "I work in two modes:\n1) **SQL** for structured data (programs, fees, eligibility, documents, scholarships, hostel tables).\n2) **RAG** for narrative answers (application process, refund policy, FAQs) using your FAISS index."
    if "help" in ql or "examples" in ql or "what can i ask" in ql:
        return ("Try:\n"
                "• UG NRI fee structure 2025\n"
                "• MSc documents to be submitted\n"
                "• PG eligibility for biotechnology\n"
                "• What is the UG application process?\n"
                "• Ladies hostel fee structure\n")
    return None

# ---------- table formatter ----------
def _fmt_table(tbl: dict) -> str:
    if not tbl or not tbl.get("rows"):
        return "_No matching rows._"
    title  = f"**{tbl.get('title','Results')}**"
    cols   = tbl["columns"]
    header = " | ".join(cols)
    sep    = " | ".join(["---"] * len(cols))
    lines  = [title, "", header, sep]
    for r in tbl["rows"]:
        lines.append(" | ".join("" if x is None else str(x) for x in r))
    return "\n".join(lines)

def _pack(table_dict=None, bullets=None):
    parts = []
    if table_dict: parts.append(_fmt_table(table_dict))
    if bullets:    parts.append("\n".join(f"- {b}" for b in bullets))
    return "\n".join(parts) if parts else ""

# ---------- direct SQL route (to avoid circular import) ----------
def _sql_route(q: str) -> str | None:
    intent = detect_structured_intent(q)
    f = parse_filters(q)

    # HOSTEL
    if intent == "contacts":   return _pack(sql_block_contacts(f).get("table"))
    if intent == "blocks":     return _pack(sql_list_blocks(f).get("table"))
    if intent == "hostel":     return _pack(sql_hostel_overview(f).get("table"))

    # ACADEMICS
    if intent == "links":        return _pack(sql_links(f, q).get("table"))
    if intent == "programs":     return _pack(sql_programs(f, q).get("table"))
    if intent == "eligibility":  return _pack(sql_eligibility(f, q).get("table"))
    if intent == "documents":    return _pack(sql_documents(f, q).get("table"))
    if intent == "fees":         return _pack(sql_academic_fees(f, q).get("table"))
    if intent == "scholarships": return _pack(sql_scholarships(f, q).get("table"))
    return None

# ---------- FAISS fallback ----------
def _rag(query: str) -> str:
    try:
        from app.utils.fallback_rag import faiss_answer_or_summary, answer as alt_answer
        idx = Path("Data/index/faiss")
        # Prefer faiss_answer_or_summary if available, else alt fallback
        if 'faiss_answer_or_summary' in dir(__import__('app.utils.fallback_rag', fromlist=[''])):
            out = faiss_answer_or_summary(idx, "vit_faq_vellore", query)
        else:
            out = alt_answer(query, max_chunks=6, max_tokens=450)
        return out or ""
    except Exception:
        return ""

# ---------- public ----------
def answer(query: str) -> str:
    # 1) small talk
    st = _smalltalk(query)
    if st: return st

    # 2) try SQL
    sql_text = _sql_route(query)
    if sql_text and sql_text.strip() and sql_text.strip() != "_No matching rows._":
        return sql_text

    # 3) FAISS (narratives like application/refund, deadlines, laundry, etc.)
    rag = _rag(query)
    if rag.strip():
        return rag

    # 4) Friendly not-found with suggestions
    return (
        "I couldn’t find an exact match in the tables or PDFs.\n\n"
        "**Try:**\n"
        "• Rephrase (e.g., “MSc documents to be submitted” or “PG eligibility for CSE”).\n"
        "• Add a year/category (e.g., “UG NRI fee structure 2025”).\n"
        "• Ask for a specific program (e.g., “MCA fee structure 2025”).\n"
    )

if __name__ == "__main__":
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument("--q", "-q", dest="q", default="")
    args = p.parse_args()
    print(answer(args.q or "UG programs CSE"))
