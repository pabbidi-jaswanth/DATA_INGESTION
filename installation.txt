# streamlit_app.py
# VIT FAQs — Static click-to-answer UI
# UG policy: ONLY "Programs" and "Fees" use SQLite; everything else uses FAISS (PDFs).

import pathlib
from typing import Dict, Any, List, Tuple
import streamlit as st

# ---- backend helpers you already have ----
from app.sql_router import sql_programs, sql_academic_fees
from app.utils.fallback_rag import faiss_answer_or_summary

# ---- config ----
FAISS_INDEX_DIR = pathlib.Path("Data/index/faiss")
# collections you built with build_faiss_collections.py
COLL = {
    "UG": "vit_ug",
    "PG": "vit_pg",
    "MCA": "vit_pg",      # your MCA/MSc PDFs are under PG; we reuse vit_pg
    "MSc": "vit_pg",
    "HOSTELS": "vit_hostels",
}

st.set_page_config(page_title="VIT FAQs — Click to Answer", layout="wide")

# ===================== UG — questions =====================
UG_REG: List[Dict[str, Any]] = [
    {"label": "What UG programs and specializations are offered?",
     "handler": "programs", "filters": {"level_like": "UG"}},
    {"label": "Which B.Tech specializations are available at each campus?",
     "handler": "programs", "filters": {"level_like": "UG", "program_like": "B.Tech"}},
    {"label": "What non–B.Tech UG programs are offered (BBA/B.Com/BCA etc.)?",
     "handler": "programs", "filters": {"level_like": "UG", "program_like": "BBA B.Com BCA"}},

    {"label": "UG eligibility: minimum marks and required subjects", "handler": "faiss_summary", "filters": {}},
    {"label": "Is Mathematics mandatory for specific B.Tech programs?", "handler": "faiss_summary", "filters": {}},
    {"label": "Are NIOS/correspondence students eligible for UG?", "handler": "faiss_summary", "filters": {}},
    {"label": "Eligibility for NRI/OCI/PIO applicants (UG)", "handler": "faiss_summary", "filters": {}},

    {"label": "Documents to submit for UG admission and reporting", "handler": "faiss_summary", "filters": {}},
    {"label": "Where to download affidavits and fitness forms?", "handler": "faiss_summary", "filters": {}},
    {"label": "Photo/signature/document upload specifications", "handler": "faiss_summary", "filters": {}},

    {"label": "UG tuition fee (Indian category) for AY 2025–26",
     "handler": "fees", "filters": {"level_like": "UG", "category": "Indian", "ay": "2025-26"}},
    {"label": "UG tuition fee (NRI category) for AY 2025–26",
     "handler": "fees", "filters": {"level_like": "UG", "category": "NRI", "ay": "2025-26"}},
    {"label": "UG tuition fee (Foreign category) for AY 2025–26",
     "handler": "fees", "filters": {"level_like": "UG", "category": "Foreign", "ay": "2025-26"}},

    {"label": "Is there a refundable caution deposit for UG?", "handler": "faiss_summary", "filters": {}},
    {"label": "Scholarships/waivers available for UG students", "handler": "faiss_summary", "filters": {}},

    {"label": "Step-by-step UG application process (Indian/NRI/Foreign)", "handler": "faiss_summary", "filters": {}},
    {"label": "Important admission dates and deadlines for UG", "handler": "faiss_summary", "filters": {}},
    {"label": "How is the merit list prepared and tie-break rules?", "handler": "faiss_summary", "filters": {}},
    {"label": "Counselling and seat allotment process (rounds and sliding)", "handler": "faiss_summary", "filters": {}},
    {"label": "Branch locking and later branch-change policy", "handler": "faiss_summary", "filters": {}},

    {"label": "Who is treated as NRI vs Foreign applicant?", "handler": "faiss_summary", "filters": {}},
    {"label": "NRI application portal & fee payment instructions", "handler": "faiss_summary", "filters": {}},
    {"label": "Foreign nationals/OCI/PIO application steps & fees", "handler": "faiss_summary", "filters": {}},

    {"label": "First-year hostel fee (Indian) AY 2025–26", "handler": "faiss_summary", "filters": {}},
    {"label": "First-year hostel fee (NRI/Foreign) AY 2025–26", "handler": "faiss_summary", "filters": {}},
    {"label": "Senior hostel fee overview AY 2025–26", "handler": "faiss_summary", "filters": {}},
    {"label": "Hostel block landlines and key contacts", "handler": "faiss_summary", "filters": {}},

    {"label": "Extra documents for NRI/Foreign students at reporting", "handler": "faiss_summary", "filters": {}},
    {"label": "AIU equivalence and accepted international boards", "handler": "faiss_summary", "filters": {}},

    {"label": "Mode and schedule of tuition/hostel fee payment", "handler": "faiss_summary", "filters": {}},
    {"label": "Refund policy if I withdraw before/after registration", "handler": "faiss_summary", "filters": {}},

    {"label": "When to pay balance tuition/hostel after provisional admission?", "handler": "faiss_summary", "filters": {}},
    {"label": "How to check application status and download letters?", "handler": "faiss_summary", "filters": {}},
    {"label": "How to correct mistakes in the application after submission?", "handler": "faiss_summary", "filters": {}},
    {"label": "Uploading pending 12th/board marks and verification process", "handler": "faiss_summary", "filters": {}},

    {"label": "Medium of instruction and availability of bridge courses", "handler": "faiss_summary", "filters": {}},
    {"label": "Attendance, exams and grading policy (UG) overview", "handler": "faiss_summary", "filters": {}},

    {"label": "Internships and industry-linked projects during UG", "handler": "faiss_summary", "filters": {}},
    {"label": "Recent UG placement highlights & top recruiters", "handler": "faiss_summary", "filters": {}},

    {"label": "Whom to contact for UG admissions help (email/phone)?", "handler": "faiss_summary", "filters": {}},
]

# ============ placeholders for other sections (kept as FAISS-only) ============
PG_REG  = [{"label": q, "handler": "faiss_summary", "filters": {}} for q in [
    "PG eligibility & qualifying degrees", "PG admission process & important dates",
    "VITMEE/VITREE overview", "M.Tech specializations", "MBA/PG programs offered",
    "PG document checklist", "PG scholarships/assistantships", "PG attendance & exams",
    "PG hostel overview", "PG contact emails/phones"
]]

MCA_REG = [{"label": q, "handler": "faiss_summary", "filters": {}} for q in [
    "MCA eligibility & qualifying degrees", "MCA program structure", "MCA admissions process",
    "MCA document checklist", "MCA placement highlights", "MCA contact emails/phones"
]]

MSC_REG = [{"label": q, "handler": "faiss_summary", "filters": {}} for q in [
    "MSc programs offered", "MSc eligibility", "MSc admissions steps",
    "MSc scholarships", "MSc research opportunities", "MSc contacts"
]]

HST_REG = [{"label": q, "handler": "faiss_summary", "filters": {}} for q in [
    "Hostel overview & fee types", "Hostel refund policy", "Hostel documents",
    "Ladies hostel contacts", "Mens hostel contacts"
]]

# ===================== helpers =====================
def _md_table(table: Dict[str, Any]) -> str:
    if not table or not table.get("columns") or not table.get("rows"):
        return "_No results._"
    cols = table["columns"]; rows = table["rows"]
    lines = [" | ".join(cols), " | ".join(["---"] * len(cols))]
    for r in rows:
        lines.append(" | ".join("" if x is None else str(x) for x in r))
    return "\n".join(lines)

def _normalize_values(v: Any) -> Any:
    if isinstance(v, str):
        v = v.replace("–", "-").strip()
        if v.lower() == "foreign":
            return "International"  # many CSVs use 'International' instead of 'Foreign'
    return v

def _seed_missing_keys(d: Dict[str, Any]) -> Dict[str, Any]:
    """
    Guarantee presence of every key the sql_* routers might index directly.
    We fill with safe defaults so KeyError cannot occur.
    """
    base = dict(d or {})
    # normalize common fields
    lvl = _normalize_values(base.get("level", base.get("level_like", "UG")))
    base["level"] = lvl
    base["level_like"] = lvl

    # academic year canonicalization
    ay = base.get("ay", base.get("AY", base.get("academic_year", "2025-26")))
    ay = _normalize_values(ay)
    base["ay"] = ay
    base["AY"] = ay
    base["academic_year"] = ay

    # category canonicalization
    cat = base.get("category", base.get("fee_category", "Indian"))
    cat = _normalize_values(cat)
    base["category"] = cat
    base["fee_category"] = cat

    # program filters (even fees code sometimes looks for them)
    prog_like = base.get("program_like", base.get("prog_like", ""))
    base["program_like"] = prog_like
    base["prog_like"] = prog_like

    # boolean flag some routers expect
    if "prog_is_degree" not in base:
        base["prog_is_degree"] = True

    # ensure all are strings where applicable
    for k in ["level", "level_like", "ay", "AY", "academic_year", "category", "fee_category", "program_like", "prog_like"]:
        if k in base and base[k] is None:
            base[k] = ""
        if isinstance(base.get(k), str):
            base[k] = base[k].strip()

    return base

def _normalize_for_programs(filters: Dict[str, Any]) -> Dict[str, Any]:
    f = _seed_missing_keys(filters)
    # for programs, default to UG degrees
    f["prog_is_degree"] = True
    return f

def _normalize_for_fees(filters: Dict[str, Any]) -> Dict[str, Any]:
    f = _seed_missing_keys(filters)
    # map 'Foreign' → 'International' already handled; nothing else special
    return f

def _sql_programs(filters: Dict[str, Any]) -> Tuple[bool, Dict[str, Any], str]:
    def _to_table(out): return out["table"] if isinstance(out, dict) and "table" in out else out
    try:
        f1 = _normalize_for_programs(filters)
        t1 = _to_table(sql_programs(f1, ""))
        if t1 and t1.get("columns") and t1.get("rows"):
            return True, t1, ""
        # backoffs
        f2 = _normalize_for_programs({"level_like": f1["level"], "program_like": ""})
        t2 = _to_table(sql_programs(f2, ""))
        if t2 and t2.get("rows"):
            return True, t2, ""
        f3 = _normalize_for_programs({})
        t3 = _to_table(sql_programs(f3, ""))
        if t3 and t3.get("rows"):
            return True, t3, ""
        return False, {}, "no_rows"
    except KeyError as e:
        return False, {}, f"keyerror:{e}"
    except Exception as e:
        return False, {}, f"exception:{e}"

def _sql_fees(filters: Dict[str, Any]) -> Tuple[bool, Dict[str, Any], str]:
    def _to_table(out): return out["table"] if isinstance(out, dict) and "table" in out else out
    try:
        f1 = _normalize_for_fees(filters)
        t1 = _to_table(sql_academic_fees(f1, ""))
        if t1 and t1.get("columns") and t1.get("rows"):
            return True, t1, ""
        # backoffs
        f2 = _normalize_for_fees({"level_like": f1["level"], "category": f1["category"]})
        t2 = _to_table(sql_academic_fees(f2, ""))
        if t2 and t2.get("rows"):
            return True, t2, ""
        f3 = _normalize_for_fees({"level_like": f1["level"]})
        t3 = _to_table(sql_academic_fees(f3, ""))
        if t3 and t3.get("rows"):
            return True, t3, ""
        f4 = _normalize_for_fees({})
        t4 = _to_table(sql_academic_fees(f4, ""))
        if t4 and t4.get("rows"):
            return True, t4, ""
        return False, {}, "no_rows"
    except KeyError as e:
        return False, {}, f"keyerror:{e}"
    except Exception as e:
        return False, {}, f"exception:{e}"

def _dispatch(section: str, handler: str, filters: Dict[str, Any], fallback_query: str) -> Dict[str, Any]:
    """
    UG: 'programs' & 'fees' → SQL. Everything else → FAISS.
    Other sections: FAISS with section-scoped collection.
    """
    if section == "UG" and handler == "programs":
        ok, table, err = _sql_programs(filters)
        return {"type": "table" if ok else "error", "content": table if ok else f"SQL(programs) → {err}"}

    if section == "UG" and handler == "fees":
        ok, table, err = _sql_fees(filters)
        return {"type": "table" if ok else "error", "content": table if ok else f"SQL(fees) → {err}"}

    # FAISS for everything else (section-scoped)
    try:
        col = COLL.get(section, "vit_ug")
        q = f"[{section}] {fallback_query}"
        md = faiss_answer_or_summary(FAISS_INDEX_DIR, col, q)
        return {"type": "md", "content": md or "_No context found in PDFs._"}
    except Exception as e:
        return {"type": "error", "content": f"FAISS error: {e}"}

def _render_answer(result: Dict[str, Any]):
    if result["type"] == "table":
        table = result["content"]
        cols = table.get("columns") or []; rows = table.get("rows") or []
        if cols and rows:
            import pandas as pd
            df = pd.DataFrame(rows, columns=cols)
            st.dataframe(df, use_container_width=True, hide_index=True)
            with st.expander("Copy as Markdown"):
                st.code(_md_table(table), language="markdown")
        else:
            st.warning("No rows.")
    elif result["type"] == "md":
        st.markdown(result["content"])
    else:
        st.error(result["content"])

# ===================== UI =====================
st.title("🎓 VIT — Static FAQs (Click to Answer)")

section = st.radio("Choose a section", ["UG", "PG", "MCA", "MSc", "HOSTELS"], horizontal=True)
REG_MAP = {"UG": UG_REG, "PG": PG_REG, "MCA": MCA_REG, "MSc": MSC_REG, "HOSTELS": HST_REG}
REG = REG_MAP[section]

left, right = st.columns([1.3, 2.0], gap="large")

with left:
    st.subheader(f"{section} — Questions")
    qf = st.text_input("Filter", placeholder="type to filter…").strip().lower()
    filtered = [r for r in REG if (qf in r["label"].lower())] if qf else REG
    for i, row in enumerate(filtered):
        if st.button(row["label"], key=f"{section}-{i}"):
            st.session_state["selected_item"] = (section, row)

with right:
    st.subheader("Answer")
    sel = st.session_state.get("selected_item")
    if not sel:
        st.info("Click a question on the left.")
    else:
        sec, item = sel
        label = item["label"]; handler = item["handler"]; filters = item.get("filters") or {}
        with st.spinner("Fetching…"):
            result = _dispatch(sec, handler, filters, label)
        st.markdown(f"**{label}**")
        _render_answer(result)

st.caption("Policy: UG Programs & Fees → SQLite tables (with safe key-normalization). Everything else → section-scoped PDFs via FAISS.")
