"""
Router: SQL-first for fees/programs/eligibility/documents/scholarships/hostel.
Terse tables + tiny bullets. FAISS fallback only for long-form explainers.
"""

import sqlite3, pathlib, re
from typing import Dict, Any, List

DB = pathlib.Path("Data/sql/vit_vellore.db")

# ---------- INTENT & FILTERS ----------

ACA_KEYWORDS = {
    "programs": ["program","course","degree","b.tech","m.tech","mca","msc","btech","mtech"],
    "eligibility": ["eligibility","qualify","criteria","requirements","min marks"],
    "documents": ["document","docs","upload","certificate","proof","bonafide"],
    "fees": ["tuition","fee","fees","academic fee","semester fee","fee structure","structure"],
    "scholarships": ["scholarship","waiver","merit","financial aid"]
}

def _contains_any(q: str, words: List[str]) -> bool:
    ql = q.lower()
    return any(w in ql for w in words)

def detect_structured_intent(q: str) -> str:
    ql = q.lower()

    # hostel first
    if any(k in ql for k in ["contact","phone","email","supervisor","warden","director","manager"]):
        return "contacts"
    if "block" in ql and any(k in ql for k in ["name","names","list","all","codes","code"]):
        return "blocks"
    if any(k in ql for k in ["hostel","room","mess","laundry","mh","lh"]):
        return "hostel"

    # IMPORTANT: fees wins if "fee/tuition/structure" present
    if _contains_any(ql, ACA_KEYWORDS["fees"]):
        return "fees"

    for tag in ("programs","eligibility","documents","scholarships"):
        if _contains_any(ql, ACA_KEYWORDS[tag]):
            return tag

    if any(k in ql for k in ["fee","fees","tuition"]):
        return "fees"
    return "text"

def _norm_text(s: str) -> str:
    s = s.lower().replace("&", "and")
    return re.sub(r"[^a-z0-9]+", "", s)

def parse_filters(q: str) -> Dict[str, Any]:
    ql = q.lower()
    f: Dict[str, Any] = {"ay": None, "gender": None, "category": None, "level": None, "program_like": None, "level_like": None}

    # AY (e.g., 2025 → 2025-26)
    m = re.search(r"\b(20\d{2})\b", ql)
    if m:
        yr = m.group(1)
        f["ay"] = f"{yr}-{str(int(yr[-2:])+1).zfill(2)}"

    # gender
    if any(k in ql for k in ["boy","boys","men","mh","mens"]): f["gender"] = "Male"
    if any(k in ql for k in ["girl","girls","ladies","lh","women"]): f["gender"] = "Female"

    # category synonyms -> normalize to your CSV values
    if ("nri" in ql) or ("foreign" in ql) or ("international" in ql):
        f["category"] = "International"
    elif "indian" in ql:
        f["category"] = "Indian"

    # hostel level
    if "senior" in ql: f["level"] = "Senior"
    if ("first year" in ql) or ("fresh" in ql): f["level"] = "First-Year"

    # program token → normalize (punctuation-insensitive downstream)
    m = re.search(r"\b(b\.?tech|m\.?tech|mca|m\.?sc|msc|cse|ece|mechanical|biotech|ai|data)\b", ql, flags=re.I)
    if m:
        token = m.group(1).replace(".", "")
        f["program_like"] = token

    # coarse level
    if "ug" in ql: f["level_like"] = "UG"
    if "pg" in ql: f["level_like"] = "PG"

    return f

# ---------- SQLITE HELPERS ----------

def _mk():
    con = sqlite3.connect(DB)
    con.row_factory = sqlite3.Row
    return con

def _safe_fetch(con, sql, args):
    try:
        return con.execute(sql, args).fetchall()
    except sqlite3.OperationalError:
        return []

def _norm_like(value: str) -> str:
    return f"%{_norm_text(value)}%" if value else None

def _add_norm_like_clause(col: str, val: str, where: list, args: list):
    """Case/punctuation insensitive LIKE by normalizing both sides."""
    if not val:
        return
    expr = (
        f"REPLACE(REPLACE(REPLACE(REPLACE(LOWER({col}),'.',''),'-',''),'&','and'),' ','')"
    )
    where.append(f"{expr} LIKE ?")
    args.append(_norm_like(val))

# ---------- FORMATTERS ----------

def _fmt_table(tbl: dict) -> str:
    if not tbl or not tbl.get("rows"):
        return "_No matching rows._"
    title  = f"**{tbl.get('title','Results')}**"
    cols   = tbl["columns"]
    header = " | ".join(cols)
    sep    = " | ".join(["---"]*len(cols))
    lines  = [title, "", header, sep]
    for r in tbl["rows"]:
        lines.append(" | ".join(str(x) if x is not None else "" for x in r))
    return "\n".join(lines)

def _fmt_bullets(bullets: list[str]) -> str:
    return "\n".join(f"- {b}" for b in bullets) if bullets else ""

def _pack(table_dict=None, bullets=None):
    parts = []
    if table_dict: parts.append(_fmt_table(table_dict))
    if bullets:    parts.append(_fmt_bullets(bullets))
    return "\n\n".join(parts) if parts else "_No results._"

# ---------- HOSTEL QUERIES ----------

def sql_hostel_overview(f: Dict[str,Any], limit_rows: int = 800) -> Dict[str, Any]:
    con = _mk()
    where = ["1=1"]; args=[]
    if f["gender"]:   where.append("IFNULL(b.gender,'')=IFNULL(?, '')");   args.append(f["gender"])
    if f["level"]:    where.append("IFNULL(b.level,'')=IFNULL(?, '')");    args.append(f["level"])
    if f["ay"]:       where.append("IFNULL(hf.ay,'')=IFNULL(?, '')");      args.append(f["ay"])
    if f["category"]: where.append("IFNULL(hf.category,'')=IFNULL(?, '')");args.append(f["category"])
    where.append("""(
        COALESCE(hf.total_fee,'')<>'' OR COALESCE(hf.room_mess_fee,'')<>'' OR
        COALESCE(hf.admission_fee,'')<>'' OR COALESCE(hf.caution_deposit,'')<>'' OR
        COALESCE(hf.occupancy,'')<>'' OR COALESCE(hf.mess_type,'')<>''
    )""")
    sql = f"""
    SELECT b.display_name AS block, b.gender, b.level, b.block_type,
           hf.ay, hf.category, hf.occupancy, hf.ac, hf.mess_type,
           hf.room_mess_fee, hf.admission_fee, hf.caution_deposit, hf.other_fee, hf.total_fee, hf.currency,
           hf.source_file
    FROM hostel_fees hf
    JOIN blocks b ON b.id = hf.block_id
    WHERE {' AND '.join(where)}
    ORDER BY b.block_type, block, hf.occupancy, hf.ac DESC, hf.mess_type
    """
    rows = _safe_fetch(con, sql, args); con.close()
    columns = ["Block","Gender","Level","Type","AY","Category","Occ","AC","Mess",
               "Room+Mess","Admission","Caution","Other","Total","Curr","Source"]
    tbl = {"title":"Hostel Fee Details (Vellore)", "columns":columns, "rows":[]}
    for r in rows[:limit_rows]:
        tbl["rows"].append([
            r["block"] or "", r["gender"] or "", r["level"] or "", r["block_type"] or "",
            r["ay"] or "", r["category"] or "", r["occupancy"] or "",
            "AC" if (r["ac"]==1) else ("Non-AC" if (r["ac"]==0) else ""),
            r["mess_type"] or "", r["room_mess_fee"] or "", r["admission_fee"] or "",
            r["caution_deposit"] or "", r["other_fee"] or "", r["total_fee"] or "",
            r["currency"] or "", r["source_file"] or ""
        ])
    return {"table": tbl, "bullets": []}

def sql_block_contacts(_f: Dict[str,Any]) -> Dict[str,Any]:
    con = _mk()
    rows = _safe_fetch(con, """
        SELECT '' AS block, name, role, phone, email
        FROM hostel_contacts
        ORDER BY role, name
    """, [])
    con.close()
    cols = ["Block","Name","Role","Phone","Email"]
    tbl = {"title":"Hostel Contacts", "columns":cols, "rows":[
        [r["block"], r["name"] or "", r["role"] or "", r["phone"] or "", r["email"] or ""]
        for r in rows
    ]}
    return {"table": tbl, "bullets": []}

def sql_list_blocks(f: Dict[str,Any]) -> Dict[str,Any]:
    con = _mk()
    if f["gender"] == "Female":
        sql = "SELECT block_code AS display_name, 'Female' AS gender FROM lh_blocks ORDER BY block_code"
    elif f["gender"] == "Male":
        sql = "SELECT COALESCE(block_name, block_code) AS display_name, 'Male' AS gender FROM mh_blocks ORDER BY block_code"
    else:
        sql = """
        SELECT COALESCE(block_name, block_code) AS display_name, 'Male' AS gender FROM mh_blocks
        UNION ALL
        SELECT block_code AS display_name, 'Female' AS gender FROM lh_blocks
        ORDER BY gender, display_name
        """
    rows = _safe_fetch(con, sql, []); con.close()
    cols = ["Block","Gender"]
    tbl = {"title":"Hostel Blocks", "columns":cols, "rows":[
        [r["display_name"] or "", r["gender"] or ""]
        for r in rows
    ]}
    return {"table": tbl, "bullets": []}

# ---------- ACADEMICS QUERIES ----------

def _like_clause(col: str, val: str, wh: list, args: list):
    _add_norm_like_clause(col, val, wh, args)

def sql_programs(f: Dict[str,Any], _q: str) -> Dict[str,Any]:
    con = _mk()
    where, args = ["1=1"], []
    _like_clause("level", f["level_like"], where, args)
    _like_clause("program", f["program_like"], where, args)
    rows = _safe_fetch(con, f"""
        SELECT level, program, school, duration, campus, source_file
        FROM programs
        WHERE {' AND '.join(where)}
        ORDER BY level, program
    """, args); con.close()
    cols = ["Level","Program","School","Duration","Campus","Source"]
    return {"table":{"title":"Programs","columns":cols,"rows":[
        [r["level"] or "", r["program"] or "", r["school"] or "", r["duration"] or "", r["campus"] or "", r["source_file"] or ""]
        for r in rows
    ]}, "bullets":[]}

def sql_eligibility(f: Dict[str,Any], q: str) -> Dict[str,Any]:
    con = _mk()
    where, args = ["1=1"], []
    _like_clause("level", f["level_like"], where, args)
    _like_clause("program", f["program_like"], where, args)
    # keep free-text on criteria only
    if q: _like_clause("criteria", q, where, args)
    rows = _safe_fetch(con, f"""
        SELECT level, program, criteria, source_file
        FROM eligibility
        WHERE {' AND '.join(where)}
        ORDER BY level, program
    """, args); con.close()
    cols = ["Level","Program","Criteria","Source"]
    return {"table":{"title":"Eligibility","columns":cols,"rows":[
        [r["level"] or "", r["program"] or "", r["criteria"] or "", r["source_file"] or ""]
        for r in rows
    ]}, "bullets":[]}

def sql_documents(f: Dict[str,Any], q: str) -> Dict[str,Any]:
    con = _mk()
    where, args = ["1=1"], []
    _like_clause("level", f["level_like"], where, args)
    _like_clause("program", f["program_like"], where, args)
    # keep free-text on item only
    if q: _like_clause("item", q, where, args)
    rows = _safe_fetch(con, f"""
        SELECT level, program, item, details, source_file
        FROM documents_required
        WHERE {' AND '.join(where)}
        ORDER BY level, program, item
    """, args); con.close()
    cols = ["Level","Program","Document","Details","Source"]
    return {"table":{"title":"Documents Required","columns":cols,"rows":[
        [r["level"] or "", r["program"] or "", r["item"] or "", r["details"] or "", r["source_file"] or ""]
        for r in rows
    ]}, "bullets":[]}

def sql_academic_fees(f: Dict[str,Any], _q: str) -> Dict[str,Any]:
    con = _mk()
    where, args = ["1=1"], []
    # ONLY use parsed program token; DO NOT match whole free text
    _like_clause("program", f["program_like"], where, args)

    # level filter (exact only if provided as UG/PG)
    if f["level_like"]:
        where.append("LOWER(level)=?")
        args.append(f["level_like"].lower())

    # AY
    if f["ay"]:
        where.append("IFNULL(ay,'')=IFNULL(?, '')")
        args.append(f["ay"])

    # Category
    if f["category"]:
        where.append("IFNULL(category,'')=IFNULL(?, '')")
        args.append(f["category"])

    rows = _safe_fetch(con, f"""
        SELECT level, program, category, ay, tuition, one_time, caution, total, currency, source_file
        FROM academic_fees
        WHERE {' AND '.join(where)}
        ORDER BY level, program, category, ay
    """, args); con.close()
    cols = ["Level","Program","Category","AY","Tuition","One-time","Caution","Total","Curr","Source"]
    return {"table":{"title":"Academic Fees","columns":cols,"rows":[
        [r["level"] or "", r["program"] or "", r["category"] or "", r["ay"] or "",
         r["tuition"] or "", r["one_time"] or "", r["caution"] or "", r["total"] or "",
         r["currency"] or "", r["source_file"] or ""]
        for r in rows
    ]}, "bullets":[]}

def sql_scholarships(f: Dict[str,Any], q: str) -> Dict[str,Any]:
    con = _mk()
    where, args = ["1=1"], []
    _like_clause("level", f["level_like"], where, args)
    if q: _like_clause("name", q, where, args)
    rows = _safe_fetch(con, f"""
        SELECT level, name, criteria, amount, currency, source_file
        FROM scholarships
        WHERE {' AND '.join(where)}
        ORDER BY level, name
    """, args); con.close()
    cols = ["Level","Name","Criteria","Amount","Curr","Source"]
    return {"table":{"title":"Scholarships","columns":cols,"rows":[
        [r["level"] or "", r["name"] or "", r["criteria"] or "", r["amount"] or "", r["currency"] or "", r["source_file"] or ""]
        for r in rows
    ]}, "bullets":[]}

# ---------- ROUTER ----------

def _sql_route(q: str) -> str | None:
    intent = detect_structured_intent(q)
    f = parse_filters(q)

    # HOSTEL
    if intent == "contacts":
        return _pack(sql_block_contacts(f).get("table"))
    if intent == "blocks":
        return _pack(sql_list_blocks(f).get("table"))
    if intent in ("hostel", "tabular"):
        return _pack(sql_hostel_overview(f).get("table"))

    # ACADEMICS
    if intent == "programs":
        return _pack(sql_programs(f, q).get("table"))
    if intent == "eligibility":
        return _pack(sql_eligibility(f, q).get("table"))
    if intent == "documents":
        return _pack(sql_documents(f, q).get("table"))
    if intent == "fees":
        return _pack(sql_academic_fees(f, q).get("table"))
    if intent == "scholarships":
        return _pack(sql_scholarships(f, q).get("table"))

    return None

# ---------- PUBLIC API ----------

def answer(query: str) -> str:
    sql_text = _sql_route(query)
    if sql_text is not None and sql_text.strip() != "_No matching rows._":
        return sql_text

    # FAISS fallback (tight + sourcey)
    try:
        from app.utils.fallback_rag import answer as rag_fallback
        rag = rag_fallback(query, max_chunks=6, max_tokens=450)
        return rag or "_I couldn't find that in my sources._"
    except Exception:
        return "_I couldn't find that in my sources._"

if __name__ == "__main__":
    import sys
    q = " ".join(sys.argv[1:]) or "Show MH Senior NRI hostel fees 2025"
    print(answer(q))
