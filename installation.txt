# app/rag_answer.py
"""
Top-level QA entrypoint.
- SQL-first via sql_router._sql_route
- Narrative & smalltalk fallbacks via FAISS/text + canned answers
- No "Try these tips" banners; just the best answer we can produce now.
"""

from app.sql_router import (
    detect_structured_intent, parse_filters,
    sql_hostel_overview, sql_block_contacts, sql_list_blocks,
    sql_programs, sql_eligibility, sql_documents, sql_academic_fees, sql_scholarships
)

# ------------------ render helpers ------------------

def _fmt_table(tbl: dict) -> str:
    if not tbl or not tbl.get("rows"):
        return "_No matching rows._"
    title  = f"**{tbl.get('title','Results')}**"
    cols   = tbl["columns"]
    header = " | ".join(cols)
    sep    = " | ".join(["---"] * len(cols))
    lines  = [title, "", header, sep]
    for r in tbl["rows"]:
        lines.append(" | ".join("" if x is None else str(x) for x in r))
    return "\n".join(lines)

def _pack(table_dict=None, bullets=None):
    parts = []
    if table_dict: parts.append(_fmt_table(table_dict))
    if bullets:    parts.append("\n".join(f"- {b}" for b in bullets))
    return "\n".join(parts) if parts else "_No results._"

# ------------------ smalltalk defaults ------------------

def _smalltalk_answer(q: str) -> str | None:
    ql = q.lower().strip()

    # who/what/when/why/how generic
    if ql in {"who are you", "who are you?", "who r u", "who r u?"}:
        return "I’m the **VIT Admissions Chatbot**. I answer using your PDFs (FAISS) and your structured CSV→SQLite data."
    if "how do you work" in ql or "how you work" in ql or "how does you will work" in ql:
        return ("I first check your structured tables (fees, programs, eligibility, documents, scholarships, hostel, links). "
                "If that doesn’t fit the question, I switch to your PDFs using FAISS search. For basic chat, I give quick default replies.")
    if ql.startswith(("who ","what ","when ","why ","how ","where ")):
        return ("I can help with admissions info (fees, eligibility, programs, documents, scholarships, hostel, links) and with narrative FAQs "
                "(application process, refund policy, deadlines) from your PDFs. Ask me in any style.")

    # very short identity / greeting
    if ql in {"hi","hello","hey"}:
        return "Hi! I’m the VIT Admissions Chatbot. What would you like to know?"
    if "what is your name" in ql:
        return "I’m the VIT Admissions Chatbot."
    if "help" in ql and len(ql) <= 30:
        return "You can ask about fees, programs, eligibility, required documents, scholarships, hostel details, links, and admission/refund process."

    return None

# ------------------ RAG & text fallback ------------------

def _rag_answer(q: str) -> str | None:
    # Preferred: FAISS helper #1
    try:
        from app.utils.fallback_rag import faiss_answer_or_summary
        from pathlib import Path
        resp = faiss_answer_or_summary(Path("Data/index/faiss"), "vit_faq_vellore", q)
        if resp and resp.strip():
            return resp.strip()
    except Exception:
        pass

    # Alternate: FAISS helper #2
    try:
        from app.utils.fallback_rag import answer as rag_answer
        resp2 = rag_answer(q, max_chunks=6, max_tokens=500)
        if resp2 and resp2.strip():
            return resp2.strip()
    except Exception:
        pass

    # Simple local text fallback: scan any .txt in Data/ for the query terms
    import glob, os
    qlow = q.lower()
    hits = []
    for path in glob.glob("Data/**/*.txt", recursive=True):
        try:
            with open(path, "r", encoding="utf-8", errors="ignore") as f:
                text = f.read()
                # match any token longer than 3 chars
                tokens = [t for t in qlow.split() if len(t) > 3]
                if not tokens or any(tok in text.lower() for tok in tokens):
                    snippet = text[:900].strip().replace("\n", " ")
                    hits.append(f"{snippet}  \n\n_Source: {os.path.basename(path)}_")
                    break
        except Exception:
            continue
    if hits:
        return hits[0]

    return None

# ------------------ SQL route ------------------

def _sql_route(q: str) -> str | None:
    intent = detect_structured_intent(q)
    f = parse_filters(q)

    # HOSTEL
    if intent == "contacts":   return _pack(sql_block_contacts(f).get("table"))
    if intent == "blocks":     return _pack(sql_list_blocks(f).get("table"))
    if intent == "hostel":     return _pack(sql_hostel_overview(f).get("table"))

    # ACADEMICS
    if intent == "programs":     return _pack(sql_programs(f, q).get("table"))
    if intent == "eligibility":  return _pack(sql_eligibility(f, q).get("table"))
    if intent == "documents":    return _pack(sql_documents(f, q).get("table"))
    if intent == "fees":         return _pack(sql_academic_fees(f, q).get("table"))
    if intent == "scholarships": return _pack(sql_scholarships(f, q).get("table"))

    # LINKS table/CSV lives in sql_router; surface via small intent check here too
    if intent == "links":
        from app.sql_router import sql_links
        return _pack(sql_links(f, q).get("table"))

    return None

# ------------------ public ------------------

def answer(query: str) -> str:
    # 1) SQL first (structured)
    sql_text = _sql_route(query)
    if sql_text is not None and sql_text.strip() != "_No matching rows._":
        return sql_text

    # 2) Smalltalk defaults
    st = _smalltalk_answer(query)
    if st:
        return st

    # 3) RAG (application process / refund policy / deadlines / other narrative)
    rag = _rag_answer(query)
    if rag:
        return rag

    # 4) Final fallback (silent, no “tips” banner)
    return "Sorry — I don’t have that yet."

if __name__ == "__main__":
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument("--q", "-q", dest="q", default="")
    args = p.parse_args()
    print(answer(args.q or "UG programs CSE"))
