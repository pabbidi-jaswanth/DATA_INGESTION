# load_sqlite.py
# Build SQLite DB from staging CSVs (hostel + academics)
# DB path: Data/sql/vit_vellore.db

import sqlite3, pathlib, csv, re, os, glob
from typing import Optional, Tuple, List, Dict
import pandas as pd

BASE    = pathlib.Path("Data")
STAGING = BASE / "staging"
SQLDIR  = BASE / "sql"
SQLDIR.mkdir(parents=True, exist_ok=True)
DB_PATH = SQLDIR / "vit_vellore.db"

MONEY = r"(?:₹|INR|USD|\$)\s*[\d,]+(?:\.\d+)?"

# -------------------- DB utils --------------------

def _mk_conn():
    con = sqlite3.connect(DB_PATH)
    con.execute("PRAGMA journal_mode=WAL;")
    con.execute("PRAGMA synchronous=NORMAL;")
    return con

def _exec_schema(con: sqlite3.Connection, ddl: str):
    con.executescript(ddl)

def _schema(con: sqlite3.Connection):
    """Create BOTH hostel + academics schema (merged)."""
    _exec_schema(con, """
    -- ---------------- HOSTEL ----------------
    CREATE TABLE IF NOT EXISTS blocks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        block_name  TEXT,
        display_name TEXT,
        gender      TEXT,     -- Male | Female
        level       TEXT,     -- First-Year | Senior | NULL
        block_type  TEXT
    );

    CREATE TABLE IF NOT EXISTS hostel_fees (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        block_id INTEGER NOT NULL,
        ay TEXT,                  -- 2025-26
        category TEXT,            -- Indian | NRI | Foreign
        occupancy TEXT,           -- "2 Sharing" / "6 Sharing" / "2 Bed" etc
        ac INTEGER,               -- 1=AC, 0=Non-AC, NULL=unknown
        mess_type TEXT,           -- Special / Non-Veg / Veg / ...
        room_mess_fee TEXT,
        admission_fee TEXT,
        caution_deposit TEXT,
        other_fee TEXT,
        total_fee TEXT,
        currency TEXT,            -- INR | USD
        source_file TEXT
    );

    CREATE TABLE IF NOT EXISTS amenities (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        block_id INTEGER NOT NULL,
        key TEXT,                 -- 'Laundry','Mess','Note'
        value TEXT
    );

    CREATE TABLE IF NOT EXISTS contacts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        block_id INTEGER NOT NULL,
        name TEXT,
        role TEXT,
        phone TEXT,
        email TEXT
    );

    -- helpful hostel indexes
    CREATE INDEX IF NOT EXISTS idx_blocks_name ON blocks(block_name);
    CREATE INDEX IF NOT EXISTS idx_hostel_fees ON hostel_fees(block_id, ay, category);
    CREATE INDEX IF NOT EXISTS idx_contacts_role ON contacts(role);
    CREATE INDEX IF NOT EXISTS idx_contacts_phone ON contacts(phone);
    CREATE INDEX IF NOT EXISTS idx_contacts_email ON contacts(email);

    -- ---------------- ACADEMICS ----------------
    CREATE TABLE IF NOT EXISTS programs (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      level TEXT,                  -- UG | PG | MCA | MSc
      program TEXT,                -- e.g., "B.Tech CSE"
      school TEXT,                 -- optional
      duration TEXT,               -- e.g., "4 years"
      campus TEXT,                 -- optional
      source_file TEXT
    );

    CREATE TABLE IF NOT EXISTS eligibility (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      level TEXT,
      program TEXT,                -- "ALL" for common/overall UG or PG criteria
      criteria TEXT,
      source_file TEXT
    );

    CREATE TABLE IF NOT EXISTS documents_required (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      level TEXT,
      program TEXT,                -- "ALL" for level-wide docs
      item TEXT,
      details TEXT,
      source_file TEXT
    );

    CREATE TABLE IF NOT EXISTS academic_fees (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      level TEXT,
      program TEXT,                -- "ALL" when fees not per-program
      category TEXT,               -- Indian | NRI | Foreign
      ay TEXT,                     -- 2025-26
      tuition TEXT,
      one_time TEXT,               -- admission/enrolment/registration etc
      caution TEXT,
      total TEXT,
      currency TEXT,               -- INR | USD
      source_file TEXT
    );

    CREATE TABLE IF NOT EXISTS scholarships (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      level TEXT,                  -- UG | PG | Research
      name TEXT,
      criteria TEXT,
      amount TEXT,
      currency TEXT,
      source_file TEXT
    );

    CREATE TABLE IF NOT EXISTS rules (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      category TEXT,               -- attendance | refund | discipline | anti-ragging | exam
      title TEXT,
      text TEXT,
      ay TEXT,
      source_file TEXT
    );

    CREATE TABLE IF NOT EXISTS vitree (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      key TEXT,                    -- "process" | "application" | "timeline"
      value TEXT,
      source_file TEXT
    );

    CREATE TABLE IF NOT EXISTS vitree_fees (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      category TEXT,               -- Indian | NRI | Foreign
      ay TEXT,
      fee TEXT,
      currency TEXT,
      source_file TEXT
    );

    CREATE TABLE IF NOT EXISTS vitree_stipend (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      scheme TEXT,                 -- e.g., "Institute Fellowship"
      amount TEXT,
      period TEXT,                 -- e.g., "per month"
      currency TEXT,
      source_file TEXT
    );

    -- helpful academics indexes
    CREATE INDEX IF NOT EXISTS idx_prog ON programs(level, program);
    CREATE INDEX IF NOT EXISTS idx_elig ON eligibility(level, program);
    CREATE INDEX IF NOT EXISTS idx_docs ON documents_required(level, program);
    CREATE INDEX IF NOT EXISTS idx_fees ON academic_fees(level, program, category, ay);
    CREATE INDEX IF NOT EXISTS idx_rules ON rules(category);
    """)

# -------------------- HOSTEL staging → SQL (your existing logic) --------------------

def _get_or_create_block(con: sqlite3.Connection, block_name: str, display: Optional[str],
                         gender: str, level: Optional[str], btype: Optional[str]) -> int:
    row = con.execute(
        "SELECT id FROM blocks WHERE block_name=? AND IFNULL(level,'')=IFNULL(?, '') AND IFNULL(block_type,'')=IFNULL(?, '') AND IFNULL(gender,'')=IFNULL(?, '')",
        (block_name, level, btype, gender)
    ).fetchone()
    if row: return row[0]
    con.execute("INSERT INTO blocks(block_name, display_name, gender, level, block_type) VALUES(?,?,?,?,?)",
                (block_name, display or block_name, gender, level, btype))
    return con.execute("SELECT last_insert_rowid()").fetchone()[0]

def _guess_meta_from_filename(name: str) -> Tuple[str, Optional[str], str, str]:
    """Returns: gender, level, ay, category_hint (hostel-only helper)"""
    n = name.lower()
    gender = "Male" if n.startswith("mh") else ("Female" if n.startswith("lh") else "")
    level  = "Senior" if "senior" in n else ("First-Year" if ("first-year" in n or "first year" in n) else None)
    ay = ""
    m = re.search(r"(20\d{2})\D{0,3}(\d{2})", n)
    if m: ay = f"{m.group(1)}-{m.group(2)}"
    if "nri" in n or "foreign" in n:
        cat = "NRI"
    elif "indian" in n:
        cat = "Indian"
    else:
        cat = ""
    return gender, level, ay, cat

HEADER_ALIASES = {
    "room_type":      ["roomtype", "room", "acnonac", "ac/nonac", "ac", "nonac", "category", "roomcategory"],
    "mess_type":      ["messtype", "diet", "veg", "nonveg", "specialmess", "special"],
    "room_mess_fee":  ["roomandmessfee", "roommessfee", "hostelfee", "room&messfee", "roommess", "roomandmess", "hostelandmessfee"],
    "admission_fee":  ["admissionfee", "admission"],
    "caution_deposit":["cautiondeposit", "refundabledeposit", "caution", "deposit"],
    "other_fee":      ["other", "utility", "electricity", "maintenance", "service"],
    "total_fee":      ["total", "grandtotal", "overalltotal", "nettotal", "totalamount"],
}

def _norm(s: str) -> str:
    return re.sub(r"[^a-z0-9]+","", (s or "").lower())

def _score_header_row(cells: List[str]) -> int:
    toks = [_norm(c) for c in cells]
    score = 0
    for k in "room mess total admission caution deposit fee ac non".split():
        if any(k in t for t in toks): score += 1
    return score

def _find_header_idx(rows: List[List[str]]) -> int:
    best_i, best_s = 0, -1
    for i in range(min(6, len(rows))):
        s = _score_header_row(rows[i])
        if s > best_s:
            best_s, best_i = s, i
    return best_i

def _map_columns(header_cells: List[str]) -> dict:
    hnorm = [_norm(c) for c in header_cells]
    mapping = {k: None for k in HEADER_ALIASES.keys()}
    for k, aliases in HEADER_ALIASES.items():
        for idx, h in enumerate(hnorm):
            if any(a in h for a in aliases):
                if k == "total_fee":
                    mapping[k] = idx
                elif mapping[k] is None:
                    mapping[k] = idx
    return mapping

def _detect_occupancy(text: str) -> Optional[str]:
    m = re.search(r"\b(\d+)\s*(?:/|\s)?\s*(\d+)?\s*(sharing|seater|bed|occupancy)\b", text, flags=re.I) \
        or re.search(r"\b(\d+)\s*(sharing|seater|bed|occupancy)\b", text, flags=re.I)
    if not m: return None
    g = [x for x in m.groups() if x and x.isdigit()]
    word = (m.groups()[-1] or "").title()
    return f"{g[0]}/{g[1]} {word}" if len(g) == 2 else f"{g[0]} {word}"

def _detect_ac(text: str) -> Optional[int]:
    if re.search(r"\bNon[- ]?AC\b", text, flags=re.I): return 0
    if re.search(r"\bAC\b|\bA/C\b", text, flags=re.I): return 1
    return None

def _clean_amt(s: str) -> str:
    s = (s or "").strip()
    return re.sub(r"[^\d₹$,\.INRUSD ]", "", s) if s else ""

def _row_has_any_value(*vals) -> bool:
    return any((v or "").strip() for v in vals)

def _insert_fee_row(con, block_id: int, ay: str, category: str, occ: str, ac: Optional[int],
                    mess: str, room_mess: str, admission: str, caution: str, other: str,
                    total: str, currency: str, source_file: str):
    if not _row_has_any_value(occ, mess, room_mess, admission, caution, other, total):
        return
    con.execute("""
        INSERT INTO hostel_fees(block_id, ay, category, occupancy, ac, mess_type,
                                room_mess_fee, admission_fee, caution_deposit, other_fee, total_fee, currency, source_file)
        VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)
    """, (block_id, ay, category, occ, ac, mess, room_mess, admission, caution, other, total, currency, source_file))

def _currency_from(filename: str, row_text: str, header_text: str) -> str:
    if "usd" in row_text.lower() or "$" in row_text or "usd" in header_text.lower():
        return "USD"
    if "inr" in row_text.lower() or "₹" in row_text or "inr" in header_text.lower():
        return "INR"
    fn = filename.lower()
    if ("nri" in fn) or ("foreign" in fn): return "USD"
    if ("indian" in fn): return "INR"
    return ""

def load_staging_csvs_hostel(con: sqlite3.Connection):
    files = sorted(STAGING.glob("*.csv"))
    for path in files:
        stem = path.stem.lower()
        # only fee-structure CSVs (leave other CSVs to the academics loader)
        if not (stem.startswith("mh-") or stem.startswith("lh-") or "hostel" in stem):
            continue

        gender, level, ay, cat_hint = _guess_meta_from_filename(path.stem)
        block_title = ("Men Hostel" if gender=="Male" else "Ladies Hostel") + (f" {level}" if level else "")
        block_id = _get_or_create_block(con, block_title, block_title, gender or "", level, None)

        rows = list(csv.reader(path.open("r", encoding="utf-8")))
        if not rows: 
            continue

        hi = _find_header_idx(rows)
        header = rows[hi]
        colmap = _map_columns(header)
        header_text = " ".join(header)

        for r in rows[hi+1:]:
            if not any(c.strip() for c in r): 
                continue
            room_col = colmap.get("room_type"); mess_col = colmap.get("mess_type")
            room_txt = (r[room_col] if (room_col is not None and room_col < len(r)) else "")
            mess_txt = (r[mess_col] if (mess_col is not None and mess_col < len(r)) else "")
            joined = " ".join([c for c in r if c])

            occ = _detect_occupancy(room_txt) or _detect_occupancy(joined) or ""
            ac  = _detect_ac(room_txt) or _detect_ac(joined)
            mess = (mess_txt or "").strip()
            if re.fullmatch(r"\s*(?:₹|INR|USD|\$)?\s*[\d,]+(?:\.\d+)?\s*", mess):
                mess = ""
            if re.search(r"\bspecial\b", mess, re.I): mess = "Special Mess"
            elif re.search(r"non\s*veg", mess, re.I): mess = "Non Veg"
            elif re.search(r"\bveg\b", mess, re.I):   mess = "Veg"

            def pick_amount(key: str) -> str:
                idx = colmap.get(key)
                return _clean_amt(r[idx]) if (idx is not None and idx < len(r)) else ""

            room_mess  = pick_amount("room_mess_fee")
            admission  = pick_amount("admission_fee")
            caution    = pick_amount("caution_deposit")
            other      = pick_amount("other_fee")
            total      = pick_amount("total_fee")

            row_text = " ".join(r)
            currency = _currency_from(path.name, row_text, header_text)
            category = cat_hint or ("NRI" if currency=="USD" else ("Indian" if currency=="INR" else ""))

            if not _row_has_any_value(room_mess, admission, caution, other, total):
                m_all = re.findall(MONEY, row_text)
                if m_all:
                    room_mess = m_all[0]
                    if len(m_all) > 1:
                        total = m_all[-1]

            _insert_fee_row(con, block_id, ay, category, occ, ac, mess,
                            room_mess, admission, caution, other, total, currency, path.name)

    print("[OK] Loaded hostel fee CSVs into SQLITE.")

# ---------- parse Hostel_info into mh_blocks/lh_blocks/hostel_contacts ----------

def _flatten_hostel_info_frames() -> str:
    paths = sorted(glob.glob(os.path.join(str(STAGING), "Hostel_info__camelot_*.csv")))
    if not paths:
        return ""
    frames = []
    for p in paths:
        df = pd.read_csv(p, header=None, dtype=str).fillna("")
        frames.append(df)
    raw = pd.concat(frames, ignore_index=True)
    raw["joined"] = raw.apply(lambda r: " ".join([c for c in r if isinstance(c, str)]), axis=1)
    text = "\n".join(raw["joined"].tolist())
    text = re.sub(r"\s+", " ", text)
    text = text.replace("vit.ac.i n", "vit.ac.in")
    return text

def load_hostel_info(con: sqlite3.Connection):
    text = _flatten_hostel_info_frames()
    if not text:
        print("[WARN] Hostel_info__camelot_*.csv not found in staging; skipping mh/lh blocks + contacts.")
        return

    pat_mh = re.compile(
        r"(MH [A-Z](?: ANNEX)?)\s+([A-Z0-9 .’'--]+?(?:ANNEX)?)(?:\s+-\s*[A-Z ]+)?\s+0416\s*220\s*(\d{4})\s+([A-Za-z.]+@vit\.ac\.in)",
        flags=re.I,
    )
    mh = pd.DataFrame(pat_mh.findall(text), columns=["block_code","block_name","last4","email"])
    if not mh.empty:
        mh["landline"] = "0416 220 " + mh["last4"]
        mh.drop(columns=["last4"], inplace=True)
        mh["block_code"] = mh["block_code"].str.upper().str.strip()
        mh["block_name"] = (mh["block_name"].str.replace("–", "-", regex=False).str.title().str.strip())

    pat_lh = re.compile(r"(LH [A-Z]|RGT H|LH GH \(Annex\))\s+0416\s*220\s*(\d{4})", flags=re.I)
    lh = pd.DataFrame(pat_lh.findall(text), columns=["block_code","last4"])
    if not lh.empty:
        lh["landline"] = "0416 220 " + lh["last4"]
        lh.drop(columns=["last4"], inplace=True)
        lh["block_code"] = lh["block_code"].str.upper().str.strip()

    rows = [
        ("Section Supervisor (MH)", "Mr. Arasu R", "rarasu@vit.ac.in", "0416-220-2523"),
        ("Section Supervisor (LH)", "Ms. G. Subbulakshmi", "gsubbulakshmi@vit.ac.in", "0416-220-2711"),
        ("Residential Block Supervisor (LH, Transport)", "Ms. Mythily A", "mythily.a@vit.ac.in", "9488839864, 9791297375"),
    ]
    contacts = pd.DataFrame(rows, columns=["role","name","email","phone"])

    cur = con.cursor()
    cur.execute("DROP TABLE IF EXISTS mh_blocks")
    cur.execute("DROP TABLE IF EXISTS lh_blocks")
    cur.execute("DROP TABLE IF EXISTS hostel_contacts")

    if not mh.empty:
        mh.to_sql("mh_blocks", con, index=False)
    else:
        cur.execute("CREATE TABLE IF NOT EXISTS mh_blocks (block_code TEXT, block_name TEXT, email TEXT, landline TEXT)")

    if not lh.empty:
        lh.to_sql("lh_blocks", con, index=False)
    else:
        cur.execute("CREATE TABLE IF NOT EXISTS lh_blocks (block_code TEXT, landline TEXT)")

    contacts.to_sql("hostel_contacts", con, index=False)
    print("[OK] Loaded Hostel Info (blocks + contacts) into SQLITE.")

# -------------------- ACADEMICS CSV → SQL --------------------

# CSV header → table mapping (you can create clean CSVs with these headers)
ACADEMIC_SPECS: Dict[str, Dict] = {
    "programs": {
        "required": ["level","program"],
        "optional": ["school","duration","campus","source_file"],
        "table": "programs"
    },
    "eligibility": {
        "required": ["level","program","criteria"],
        "optional": ["source_file"],
        "table": "eligibility"
    },
    "documents_required": {
        "required": ["level","program","item"],
        "optional": ["details","source_file"],
        "table": "documents_required"
    },
    "academic_fees": {
        "required": ["level","program","category","ay"],
        "optional": ["tuition","one_time","caution","total","currency","source_file"],
        "table": "academic_fees"
    },
    "scholarships": {
        "required": ["level","name"],
        "optional": ["criteria","amount","currency","source_file"],
        "table": "scholarships"
    },
    "rules": {
        "required": ["category","title","text"],
        "optional": ["ay","source_file"],
        "table": "rules"
    },
    "vitree": {
        "required": ["key","value"],
        "optional": ["source_file"],
        "table": "vitree"
    },
    "vitree_fees": {
        "required": ["category","ay","fee"],
        "optional": ["currency","source_file"],
        "table": "vitree_fees"
    },
    "vitree_stipend": {
        "required": ["scheme","amount"],
        "optional": ["period","currency","source_file"],
        "table": "vitree_stipend"
    }
}

def _csv_has_headers(df: pd.DataFrame, need: List[str]) -> bool:
    cols = [c.strip().lower() for c in df.columns]
    return all(n in cols for n in need)

def _insert_dataframe(con: sqlite3.Connection, table: str, df: pd.DataFrame):
    # normalize column order and missing
    cols = [c for c in df.columns]
    placeholders = ",".join(["?"]*len(cols))
    sql = f"INSERT INTO {table} ({','.join(cols)}) VALUES ({placeholders})"
    con.executemany(sql, df.where(pd.notna(df), "").values.tolist())

def _load_single_academic_csv(con: sqlite3.Connection, path: pathlib.Path):
    df = pd.read_csv(path, dtype=str).fillna("")
    cols = [c.strip().lower() for c in df.columns]
    df.columns = cols

    # try filename-first mapping (prefix)
    stem = path.stem.lower()
    for key, spec in ACADEMIC_SPECS.items():
        if stem.startswith(f"academics_{key}") or stem.startswith(key):
            if not _csv_has_headers(df, spec["required"]):
                print(f"[SKIP] {path.name} missing required headers for {key}: {spec['required']}")
                return
            _insert_dataframe(con, spec["table"], df)
            print(f"[OK] Loaded {path.name} → {spec['table']}")
            return

    # otherwise header-based detection
    for key, spec in ACADEMIC_SPECS.items():
        if _csv_has_headers(df, spec["required"]):
            _insert_dataframe(con, spec["table"], df)
            print(f"[OK] Loaded {path.name} (by header) → {spec['table']}")
            return

    print(f"[SKIP] {path.name} — no academic table matched")

def load_academics_from_staging(con: sqlite3.Connection):
    """Ingest any 'academics_*' or header-matching CSVs into academic tables."""
    files = sorted(STAGING.glob("*.csv"))
    if not files:
        print(f"[WARN] No CSVs found in {STAGING}")
        return
    for path in files:
        # skip hostel-specific CSVs handled earlier
        s = path.stem.lower()
        if (s.startswith("mh-") or s.startswith("lh-") or "hostel" in s or s.startswith("hostel_info__")):
            continue
        try:
            _load_single_academic_csv(con, path)
        except Exception as e:
            print(f"[ERR] {path.name}: {e}")

    print("[OK] Loaded academic CSVs into SQLITE.")

# -------------------- MAIN --------------------

def main():
    con = _mk_conn()
    _schema(con)                     # 1) create ALL tables (hostel + academics)
    load_staging_csvs_hostel(con)    # 2) hostel fee CSVs → hostel_fees
    load_hostel_info(con)            # 3) mh_blocks / lh_blocks / hostel_contacts
    load_academics_from_staging(con) # 4) academics CSVs → academic tables
    con.commit()
    con.close()
    print(f"[DONE] SQLite DB ready at: {DB_PATH}")

if __name__ == "__main__":
    main()





# app/sql_router.py
import sqlite3, pathlib, re
from typing import Dict, Any

DB = pathlib.Path("Data/sql/vit_vellore.db")

def detect_structured_intent(q: str) -> str:
    ql = q.lower()
    if any(k in ql for k in ["contact", "phone", "email", "supervisor", "warden", "director", "manager"]):
        return "contacts"
    if "block" in ql and any(k in ql for k in ["name","names","list","all","codes","code"]):
        return "blocks"
    if any(k in ql for k in ["hostel", "room", "block", "mess", "dhobi", "laundry", "fee", "fees", "tuition"]):
        return "tabular"
    return "text"

def parse_filters(q: str) -> Dict[str, Any]:
    ql = q.lower()
    f = {"ay": None, "gender": None, "category": None, "level": None}
    m = re.search(r"\b(20\d{2})\b", ql)
    if m:
        yr = m.group(1); f["ay"] = f"{yr}-{str(int(yr[-2:])+1).zfill(2)}"
    if any(k in ql for k in ["boy", "boys", "men", "mh", "mens"]): f["gender"] = "Male"
    if any(k in ql for k in ["girl", "girls", "ladies", "lh", "women"]): f["gender"] = "Female"
    if "nri" in ql: f["category"] = "NRI"
    elif "foreign" in ql: f["category"] = "Foreign"
    elif "indian" in ql: f["category"] = "Indian"
    if "senior" in ql: f["level"] = "Senior"
    if "first year" in ql or "fresh" in ql: f["level"] = "First-Year"
    return f

def _mk():
    con = sqlite3.connect(DB)
    con.row_factory = sqlite3.Row
    return con

def sql_hostel_overview(f: Dict[str,Any], limit_blocks: int = 20) -> Dict[str, Any]:
    con = _mk()
    where = ["1=1"]; args=[]
    if f["gender"]:   where.append("IFNULL(b.gender,'')=IFNULL(?, '')");   args.append(f["gender"])
    if f["level"]:    where.append("IFNULL(b.level,'')=IFNULL(?, '')");    args.append(f["level"])
    if f["ay"]:       where.append("IFNULL(hf.ay,'')=IFNULL(?, '')");      args.append(f["ay"])
    if f["category"]: where.append("IFNULL(hf.category,'')=IFNULL(?, '')");args.append(f["category"])
    where.append("""(
        COALESCE(hf.total_fee,'')<>'' OR COALESCE(hf.room_mess_fee,'')<>'' OR
        COALESCE(hf.admission_fee,'')<>'' OR COALESCE(hf.caution_deposit,'')<>'' OR
        COALESCE(hf.occupancy,'')<>'' OR COALESCE(hf.mess_type,'')<>''
    )""")
    sql = f"""
    SELECT b.block_name, b.display_name, b.gender, b.level, b.block_type,
           hf.ay, hf.category, hf.occupancy, hf.ac, hf.mess_type,
           hf.room_mess_fee, hf.admission_fee, hf.caution_deposit, hf.other_fee, hf.total_fee, hf.currency,
           hf.source_file
    FROM hostel_fees hf
    JOIN blocks b ON b.id = hf.block_id
    WHERE {' AND '.join(where)}
    ORDER BY b.block_type, b.block_name, hf.occupancy, hf.ac DESC, hf.mess_type
    """
    rows = con.execute(sql, args).fetchall()
    con.close()
    columns = ["Block", "Gender", "Level", "Type", "AY", "Category", "Occ", "AC", "Mess",
               "Room+Mess", "Admission", "Caution", "Other", "Total", "Curr", "Source"]
    tbl = {"title": "Hostel Fee Details (Vellore)", "columns": columns, "rows": []}
    for r in rows[:1000]:
        tbl["rows"].append([
            r["display_name"] or r["block_name"] or "",
            r["gender"] or "", r["level"] or "", r["block_type"] or "",
            r["ay"] or "", r["category"] or "", r["occupancy"] or "",
            "AC" if (r["ac"]==1) else ("Non-AC" if (r["ac"]==0) else ""),
            r["mess_type"] or "", r["room_mess_fee"] or "", r["admission_fee"] or "",
            r["caution_deposit"] or "", r["other_fee"] or "", r["total_fee"] or "",
            r["currency"] or "", r["source_file"] or ""
        ])
    return {"table": tbl, "bullets": [], "sources": []}

def sql_block_contacts(f: Dict[str,Any]) -> Dict[str,Any]:
    con = _mk()
    # This reads your Hostel_info extraction table
    rows = con.execute("""
        SELECT '' AS block, name, role, phone, email
        FROM hostel_contacts
        ORDER BY role, name
    """).fetchall()
    con.close()
    cols = ["Block","Name","Role","Phone","Email"]
    tbl = {"title":"Hostel Contacts", "columns":cols, "rows":[
        [r["block"], r["name"] or "", r["role"] or "", r["phone"] or "", r["email"] or ""]
        for r in rows
    ]}
    return {"table": tbl, "bullets": [], "sources": []}

def sql_list_blocks(f: Dict[str,Any]) -> Dict[str,Any]:
    con = _mk()
    where = ["1=1"]; args=[]
    if f["gender"] == "Female":
        sql = "SELECT block_code AS display_name, 'Female' AS gender, '' AS level, '' AS block_type FROM lh_blocks ORDER BY block_code"
    elif f["gender"] == "Male":
        sql = "SELECT COALESCE(block_name, block_code) AS display_name, 'Male' AS gender, '' AS level, '' AS block_type FROM mh_blocks ORDER BY block_code"
    else:
        sql = """
        SELECT COALESCE(block_name, block_code) AS display_name, 'Male' AS gender, '' AS level, '' AS block_type FROM mh_blocks
        UNION ALL
        SELECT block_code AS display_name, 'Female' AS gender, '' AS level, '' AS block_type FROM lh_blocks
        ORDER BY gender, display_name
        """
    rows = con.execute(sql, args).fetchall()
    con.close()
    cols = ["Block","Gender","Level","Type"]
    tbl = {"title":"Hostel Blocks", "columns":cols, "rows":[
        [r["display_name"] or "", r["gender"] or "", r["level"] or "", r["block_type"] or ""]
        for r in rows
    ]}
    return {"table": tbl, "bullets": [], "sources": []}
